<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VisionNET</name>
    </assembly>
    <members>
        <member name="T:VisionNET.GrayscaleImage">
            <remarks>
            A grayscale image, with real-valued pixels.
            </remarks>
        </member>
        <member name="T:VisionNET.IMultichannelImage`1">
            <remarks>
            Interface for images with multiple color/data channels.
            </remarks>
            <typeparam name="T">Underlying type of the image</typeparam>
        </member>
        <member name="T:VisionNET.IArrayHandler`1">
            <remarks>
            Interface defining an array handler.  This is a class which is provides several methods for handling large three-dimensional arrays which are
            useful for computer vision.
            </remarks>
            <typeparam name="T">Any type, though ideally one on which arithmetic operators are defined.</typeparam>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.SetData(`0[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.IArrayHandler`1.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="P:VisionNET.IArrayHandler`1.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.IArrayHandler`1.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.IArrayHandler`1.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.IArrayHandler`1.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.IArrayHandler`1.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.IArrayHandler`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="M:VisionNET.IMultichannelImage`1.ToBitmap">
            <summary>
            Converts this image to a bitmap.
            </summary>
            <returns>A bitmap version of the image</returns>
        </member>
        <member name="P:VisionNET.IMultichannelImage`1.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.IMultichannelImage`1.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.IMultichannelImage`1.ID">
            <summary>
            ID for this image.
            </summary>
        </member>
        <member name="M:VisionNET.GrayscaleImage.#ctor">
            <summary>
            Constructor.  Creates an empty image.
            </summary>
        </member>
        <member name="M:VisionNET.GrayscaleImage.#ctor(System.Single[0:,0:])">
            <summary>
            Constructor.
            </summary>
            <param name="values">Values to use for populating this image</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="filename">Path to the source image</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Constructor.
            </summary>
            <param name="bitmap">Source image</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.#ctor(VisionNET.RGBImage)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Source image</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.Save(System.String)">
            <summary>
            Saves this image to the provided filename, detecting the correct file format from the extension.
            </summary>
            <param name="filename">The path to the destination image</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.ToBitmap">
            <summary>
            Returns a Bitmap version of this image using the computed minimum and maximum values.
            </summary>
            <returns>A Bitmap representing this image</returns>
        </member>
        <member name="M:VisionNET.GrayscaleImage.Normalize">
            <summary>
            Normalize the values in the image to range from 0 to 1.
            </summary>
        </member>
        <member name="M:VisionNET.GrayscaleImage.ToBitmap(System.Single,System.Single)">
            <summary>
            Returns a Bitmap version of this image.
            </summary>
            <param name="min">Minimum value, equivalent to a gray value of 0</param>
            <param name="max">Maximum value, equivalent to a gray value of 1</param>
            <returns>A Bitmap representing this image</returns>
        </member>
        <member name="M:VisionNET.GrayscaleImage.Save(VisionNET.GrayscaleImage,System.String)">
            <summary>
            Saves the provided image to file, determining the correct file format from the extension.
            </summary>
            <param name="image">The image to save</param>
            <param name="filename">The path to the destination image</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.GrayscaleImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.GrayscaleImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.GrayscaleImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.GrayscaleImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.GrayscaleImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Item(System.Int32,System.Int32)">
            <summary>
            Accesses the value at the specified row and column.
            </summary>
            <param name="row">The desired row</param>
            <param name="column">The desired column</param>
            <returns>The value at (row,column)</returns>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.GrayscaleImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.GrayscaleImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.RectangleFeatureFactory">
            <remarks>
            Feature factory for offset rectangle features.  The feature is computed as the sum of values within a rectangle offset from the 
            test point.  These features use integral images for computational efficiency.  For details see Textonboost (Shotton et al 2006).
            </remarks>
        </member>
        <member name="T:VisionNET.DecisionForests.IFeatureFactory`1">
            <remarks>
            Interface for an object which creates other objects that implement <see cref="T:IFeature" />.
            </remarks>
            <typeparam name="T">Any type, preferably on on which arithmetic operations are defined</typeparam>
        </member>
        <member name="M:VisionNET.DecisionForests.IFeatureFactory`1.Create">
            <summary>
            Creates a new feature.
            </summary>
            <returns>An object which implements <see cref="T:IFeature" /></returns>
        </member>
        <member name="M:VisionNET.DecisionForests.IFeatureFactory`1.IsProduct(VisionNET.DecisionForests.IFeature{`0})">
            <summary>
            Returns whether <paramref name="feature"/> is a product of this factory.
            </summary>
            <param name="feature">Feature to test</param>
            <returns>True if it came from this factory, false otherwise.</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.RectangleFeatureFactory.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="boxSize">Size of the box around the test point the factory can sample from.</param>
            <param name="numChannels">Number of channels the factory can sample from.</param>
            <param name="maxRows">Maximum number of rows in the test rectangle.</param>
            <param name="maxColumns">Maximum number of columns in the test rectangle.</param>
        </member>
        <member name="M:VisionNET.DecisionForests.RectangleFeatureFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.RectangleFeatureFactory.Create">
            <summary>
            Creates a new feature.
            </summary>
            <returns>An object which implements <see cref="T:IFeature" /></returns>
        </member>
        <member name="M:VisionNET.DecisionForests.RectangleFeatureFactory.IsProduct(VisionNET.DecisionForests.IFeature{System.Single})">
            <summary>
            Returns whether <paramref name="feature"/> is a product of this factory.
            </summary>
            <param name="feature">Feature to test</param>
            <returns>True if it came from this factory, false otherwise.</returns>
        </member>
        <member name="P:VisionNET.DecisionForests.RectangleFeatureFactory.BoxSize">
            <summary>
            Size of the box around the test point the factory can sample from.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.RectangleFeatureFactory.ChannelCount">
            <summary>
            Number of channels the factory can sample from.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.RectangleFeatureFactory.MaxRows">
            <summary>
            Maximum number of rows in the test rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.RectangleFeatureFactory.MaxColumns">
            <summary>
            Maximum number of columns in the test rectangle.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.IFeature`1">
            <remarks>
            Interface for a feature used in a decision forest.
            </remarks>
            <typeparam name="T">Any type, preferably one on which arithmetic operations are defined</typeparam>
        </member>
        <member name="M:VisionNET.DecisionForests.IFeature`1.Compute(VisionNET.Learning.ImageDataPoint{`0})">
            <summary>
            Computes the feature for <paramref name="point"/>.
            </summary>
            <param name="point">Point to use when computing the feature</param>
            <returns>The computed feature value</returns>
        </member>
        <member name="P:VisionNET.DecisionForests.IFeature`1.Name">
            <summary>
            The name of the feature.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.IFeature`1.Cell0">
            <summary>
            First cell in the surrounding image used by the feature.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.IFeature`1.Cell1">
            <summary>
            Second cell in the surrounding image used by the feature.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.LeafImage`1">
            <remarks>
            An image where each pixel has an array of node metadata associated with where that pixel in the source image was classified in a decision forest.
            </remarks>
            <typeparam name="T">The type of the source image and the decision forest</typeparam>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows in the image</param>
            <param name="columns">Number of columns in the image</param>
            <param name="trees">Number of trees in the source decision forest</param>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ComputeDistributionImage">
            <summary>
            Computes a label distribution at each pixel by combining its node distributions.
            </summary>
            <returns>Distribution image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ComputeHistogram">
            <summary>
            Computes a tree histogram for the source image from the nodes at each pixel.
            </summary>
            <returns>A tree histogram for the source image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ComputeHistogram(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a tree histogram for a sub-rectangle of the source image defined by the parameters.
            </summary>
            <param name="startRow">Starting row of the sub-rectangle</param>
            <param name="startColumn">Starting column of the sub-rectangle</param>
            <param name="rows">Number of rows in the sub-rectangle</param>
            <param name="columns">Number of columns in the sub-rectangle</param>
            <returns>A tree histogram</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ToBitmap">
            <summary>
            Converts this image to a bitmap.
            </summary>
            <returns>A bitmap version of the image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.SetData(VisionNET.DecisionForests.INodeInfo{`0}[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.LeafImage`1.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.LeafImage`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="T:VisionNET.DistanceTransformImage">
            <remarks>
            Performs the Chamfer distance transform on an input edge image.
            </remarks>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.ToBitmap">
            <summary>
            Returns a Bitmap version of this image using the computed minimum and maximum values.
            </summary>
            <returns>A Bitmap representing this image</returns>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.Compute(VisionNET.EdgeImage)">
            <summary>
            Computes the distance transform using the Chamfer distance transform using hybrid
            city block/chess board distance, which is a close approximation to the true
            Euclidean distance.
            </summary>
            <param name="edges">Edge image</param>
            <returns>Distance transform</returns>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.SetData(System.Int32[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.DistanceTransformImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.DistanceTransformImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.ConfusionMatrix">
            <remarks>
            Encapsulates a confusion matrix.
            </remarks>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="numLabels">Number of labels in the matrix</param>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.IgnoreLabel(System.Int32)">
            <summary>
            Ignores a particular label in the matrix when computing the accuracies.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.ClearIgnoredLabels">
            <summary>
            Clears ignored labels.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.Add(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a value to the matrix.
            </summary>
            <param name="trueCategory">The true category</param>
            <param name="inferredCategory">The inferred category</param>
            <param name="certainty">Certainty of the inferred label</param>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.Add(System.Int32,System.Int32)">
            <summary>
            Adds a value to the matrix.
            </summary>
            <param name="trueCategory">The true category</param>
            <param name="inferredCategory">The inferred category</param>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.ComputeRowSum(System.Int32)">
            <summary>
            Computes the sum for a row.
            </summary>
            <param name="row">The row to sum</param>
            <returns>The row sum</returns>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.Write(System.IO.Stream,VisionNET.Learning.ConfusionMatrix)">
            <summary>
            Writes <paramref name="matrix"/> to <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="matrix">The matrix to write</param>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.Read(System.IO.Stream)">
            <summary>
            Reads a matrix from <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>The matrix</returns>
        </member>
        <member name="M:VisionNET.Learning.ConfusionMatrix.ToString">
            <summary>
            Returns a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix</returns>
        </member>
        <member name="P:VisionNET.Learning.ConfusionMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Indexes the confusion matrix.
            </summary>
            <param name="trueCategory">True category (the row)</param>
            <param name="inferredCategory">Inferred category (the column)</param>
            <returns>The value</returns>
        </member>
        <member name="P:VisionNET.Learning.ConfusionMatrix.LabelCount">
            <summary>
            Number of labels in the matrix.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ConfusionMatrix.OverallAccuracy">
            <summary>
            The overall accuracy of the matrix, computed as the total number of correct pixels divided by the total number of pixels, for all labels.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ConfusionMatrix.AverageAccuracy">
            <summary>
            The average accuracy of the matrix, computed as the average of the category accuracies.
            </summary>
        </member>
        <member name="T:VisionNET.GammaDistribution">
            <remarks>
            Class encapsulating a Gamma distribution.
            </remarks>
        </member>
        <member name="M:VisionNET.GammaDistribution.GammaFunction(System.Double)">
            <summary>
            Computes the Gamma function for <paramref name="x"/>.
            </summary>
            <param name="x">Argument value</param>
            <returns>Result of the Gamma function for x</returns>
        </member>
        <member name="M:VisionNET.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="k">K parameter</param>
            <param name="theta">Theta parameter.</param>
        </member>
        <member name="M:VisionNET.GammaDistribution.Compute(System.Single)">
            <summary>
            Computes the Gamma distribution for <paramref name="x"/>.
            </summary>
            <param name="x">The argument</param>
            <returns>The Gamma distribution computed at <paramref name="x"/></returns>
        </member>
        <member name="M:VisionNET.GammaDistribution.Estimate(System.Collections.Generic.List{System.Single})">
            <summary>
            Estimates a Gamma distribution from the data.
            </summary>
            <param name="data">Data from which to estimate a distribution</param>
            <returns>The estimated distribution</returns>
        </member>
        <member name="P:VisionNET.GammaDistribution.Mean">
            <summary>
            Mean of the distribution.
            </summary>
        </member>
        <member name="T:VisionNET.Comparison.TreeHistogram">
            <remarks>
            A tree histogram is a hierarchical structure, in which each node "contains" in some way the values of the subtree for which it is the root.  Thus, each level
            is a histogram which desribes the same entity but with a different granularity.  This particular implementation does not store the structure, but only a list
            of nodes which store within themselves their location within the tree.  The reason for this is that this is the more memory-efficient way of storing trees for which
            the majority of the bins will be zero, and in which it is necessary to store several trees at once.  The unfortunate result of this is that the onus is on the user
            to correctly create the nodes.
            </remarks>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.#ctor(System.Collections.Generic.List{VisionNET.Comparison.TreeNode},System.String)">
            <summary>
            Constructs this histogram from <paramref name="nodes"/> and marks it with <paramref name="id"/>.
            </summary>
            <param name="nodes">The nodes to use for building the histogram.  Must already be populated with their location information.</param>
            <param name="id">The ID of this histogram</param>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.#ctor(System.Collections.Generic.List{VisionNET.Comparison.TreeNode})">
            <summary>
            Constructs this histogram from <paramref name="nodes" />.
            </summary>
            <param name="nodes">The nodes to use for building the histogram.  Must already be populated with their location information.</param>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Contains(VisionNET.Comparison.TreeNode)">
            <summary>
            Whether this node is already contained within the tree.
            </summary>
            <param name="node">The node to search for</param>
            <returns>Whether this node is present</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Divide(VisionNET.Comparison.TreeHistogram,System.Single)">
            <summary>
            Divides the all nodes in <paramref name="hist"/> by <paramref name="value"/>.  Does not alter the arguments.
            </summary>
            <param name="hist">Histogram to divide</param>
            <param name="value">Divisor</param>
            <returns>The resulting histogram</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Union(VisionNET.Comparison.TreeHistogram,VisionNET.Comparison.TreeHistogram)">
            <summary>
            Creates a union of two TreeHistograms.
            </summary>
            <param name="lhs">Histogram to union</param>
            <param name="rhs">Second histogram</param>
            <returns>Union of both histograms</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Subtract(VisionNET.Comparison.TreeHistogram,VisionNET.Comparison.TreeHistogram)">
            <summary>
            Subtracts the values in one histogram from another.
            </summary>
            <param name="lhs">A histogram</param>
            <param name="rhs">The histogram to subtract</param>
            <returns>The difference of the two histograms</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Intersect(VisionNET.Comparison.TreeHistogram,VisionNET.Comparison.TreeHistogram)">
            <summary>
            Intersects two histograms.
            </summary>
            <param name="lhs">Histogram</param>
            <param name="rhs">The second histogram</param>
            <returns>The histogram intersection of <paramref name="lhs"/> and <paramref name="rhs"/></returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Write(System.IO.Stream,VisionNET.Comparison.TreeHistogram)">
            <summary>
            Writes <paramref name="hist"/> to <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream to use for writing the histogram</param>
            <param name="hist">Histogram to write</param>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.Read(System.IO.Stream)">
            <summary>
            Reads a histogram from <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>The stored histogram</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.GetEnumerator">
            <summary>
            Returns an enumerator for this histogram.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeHistogram.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for this histogram.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:VisionNET.Comparison.TreeHistogram.ID">
            <summary>
            ID of this histogram.
            </summary>
        </member>
        <member name="P:VisionNET.Comparison.TreeHistogram.Item(System.Byte,System.Int32)">
            <summary>
            Indexes the histogram.  Uses a binary search to find the appropriate node, and thus should not be used in computationally intensive circumstances.
            </summary>
            <param name="tree">Tree of the node</param>
            <param name="index">Index of the node</param>
            <returns>The value of the node within the tree</returns>
        </member>
        <member name="P:VisionNET.Comparison.TreeHistogram.Count">
            <summary>
            The number of nodes in the tree.
            </summary>
        </member>
        <member name="T:VisionNET.BooleanArrayHandler">
            <remarks>
            Handles a three dimensional array of boolean values.
            </remarks>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.#ctor">
            <summary>
            Constructor.  Creates a dimensionless array.
            </summary>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.#ctor(System.Boolean[0:,0:,0:])">
            <summary>
            Constructor.
            </summary>
            <param name="data">Array to handle.</param>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.SetData(System.Boolean[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.BooleanArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="P:VisionNET.BooleanArrayHandler.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.BooleanArrayHandler.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.BooleanArrayHandler.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.BooleanArrayHandler.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.BooleanArrayHandler.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.BooleanArrayHandler.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum is computed.
            </summary>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="T:VisionNET.Rectangle">
            <remarks>
            A rectangle.
            </remarks>
        </member>
        <member name="P:VisionNET.Rectangle.R">
            <summary>
            Starting row of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.C">
            <summary>
            Starting column of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Rows">
            <summary>
            Number of rows in the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Columns">
            <summary>
            Number of columns in the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Top">
            <summary>
            Top edge of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Left">
            <summary>
            Left edge of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Right">
            <summary>
            Right edge of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Bottom">
            <summary>
            Bottom edge of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Width">
            <summary>
            Width of the rectangle (equivalent to <see cref="P:VisionNET.Rectangle.Columns"/>).
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Height">
            <summary>
            Height of the rectangle (equivalent to <see cref="P:VisionNET.Rectangle.Rows"/>).
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.X">
            <summary>
            X-offset of the rectangle (equivalent to <see cref="P:VisionNET.Rectangle.C"/>).
            </summary>
        </member>
        <member name="P:VisionNET.Rectangle.Y">
            <summary>
            Y-offset of the rectangle (equivalent to <see cref="P:VisionNET.Rectangle.R"/>).
            </summary>
        </member>
        <member name="T:VisionNET.Keypoint">
            <remarks>
            Encapsulates a keypoint, with an x and y coordinate and option scale, source scale, orientation and
            descriptor metadata.
            </remarks>
        </member>
        <member name="M:VisionNET.Keypoint.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
        </member>
        <member name="M:VisionNET.Keypoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate of the point</param>
            <param name="y">Y-coordinate of the point</param>
            <param name="imageScale">Scale of the source image (in relation to the original image)</param>
            <param name="scale">Scale of this point</param>
            <param name="orientation">Orientation of this point</param>
        </member>
        <member name="M:VisionNET.Keypoint.ToString">
            <summary>
            Returns a string representation of the keypoint.
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="P:VisionNET.Keypoint.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:VisionNET.Keypoint.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:VisionNET.Keypoint.ImageScale">
            <summary>
            Scale of the source image.
            </summary>
        </member>
        <member name="P:VisionNET.Keypoint.Scale">
            <summary>
            Scale of the point.
            </summary>
        </member>
        <member name="P:VisionNET.Keypoint.Orientation">
            <summary>
            Orientation of the point.
            </summary>
        </member>
        <member name="P:VisionNET.Keypoint.HasDescriptor">
            <summary>
            Whether this point has a descriptor.
            </summary>
        </member>
        <member name="P:VisionNET.Keypoint.Descriptor">
            <summary>
            Descriptor for this point.
            </summary>
        </member>
        <member name="T:VisionNET.Convolution">
            <remarks>
            This class contains routines for convolving images with image filter kernels.
            </remarks>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveGaussian``1(VisionNET.IArrayHandler{System.Single},System.Single)">
            <summary>
            Convolves the provided image with a two dimensional Gaussian of the provided sigma and returns the result.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="sigma">The sigma to use in the Gaussian</param>
            <returns>A blurred image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveGaussian``1(VisionNET.IArrayHandler{System.Single},System.Single,System.Int32)">
            <summary>
            Convolves the provided image with a two dimensional Gaussian of the provided sigma and returns the result,
            subsampled as directed.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="sigma">The sigma to use in the Gaussian</param>
            <param name="subsample">The subsampling frequency.</param>
            <returns>A blurred image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveHalf``1(VisionNET.IArrayHandler{System.Single},System.Single[],System.Int32)">
            <summary>
            Convolves the image using the provided kernel for both horizontal and vertical convolution.
            The kernel is assumed to be radially invariant, seperable and 
            take  the form {center value, value 1 pixel from center, value 2 pixels from center, etc.}.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="kernel">The kernel to use in both directions.</param>
            <param name="subsample">The amount to subsample the image.</param>
            <returns>A fitlered image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveHalf``1(VisionNET.IArrayHandler{System.Single},System.Single[])">
            <summary>
            Convolves an image with the provided kernel.  The kernel is assumed to be radially invariant, seperable and 
            take  the form {center value, value 1 pixel from center, value 2 pixels from center, etc.}.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="kernel">The kernel to use for convolution</param>
            <returns>A fitlered image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveHalf``1(VisionNET.IArrayHandler{System.Single},System.Single[],System.Single[],System.Int32)">
            <summary>
            Convolves an image with the provided kernels.  Both kernels are assumed to be radially invariant, seperable and 
            take the form {center value, value 1 pixel from center, value 2 pixels from center, etc.}.  The result is
            sub-sampled using the provided frequency.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="kernelx">The kernel to use for convolution in the horizontal direction</param>
            <param name="kernely">The kernel to use for convolution in the vertical direction</param>
            <param name="subsample">The subsampling frequency</param>
            <returns>a fitlered image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveFull``1(VisionNET.IArrayHandler{System.Single},System.Single[])">
            <summary>
            Convolves an image with the provided kernels.  These Kernels are full kernels, in that they go from
            a minimum value to a maximum value.  There are no restrictions on what these kernels can be, though
            the user is cautioned to make sure that they are passing kernels which make sense, as this code
            does not check for any of the necessary kernel conditions.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="kernel">The kernel to use for convolution in the horizontal direction</param>
            <returns>a fitlered image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveFull``1(VisionNET.IArrayHandler{System.Single},System.Single[],System.Int32)">
            <summary>
            Convolves an image with the provided kernels.  These Kernels are full kernels, in that they go from
            a minimum value to a maximum value.  There are no restrictions on what these kernels can be, though
            the user is cautioned to make sure that they are passing kernels which make sense, as this code
            does not check for any of the necessary kernel conditions.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="kernel">The kernel to use for convolution in the horizontal direction</param>
            <param name="subsample">The subsampling frequency</param>
            <returns>a fitlered image</returns>
        </member>
        <member name="M:VisionNET.Convolution.ConvolveFull``1(VisionNET.IArrayHandler{System.Single},System.Single[],System.Single[],System.Int32)">
            <summary>
            Convolves an image with the provided kernels.  These Kernels are full kernels, in that they go from
            a minimum value to a maximum value.  There are no restrictions on what these kernels can be, though
            the user is cautioned to make sure that they are passing kernels which make sense, as this code
            does not check for any of the necessary kernel conditions.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">The image to convolve.</param>
            <param name="kernelx">The kernel to use for convolution in the horizontal direction</param>
            <param name="kernely">The kernel to use for convolution in the vertical direction</param>
            <param name="subsample">The subsampling frequency</param>
            <returns>a fitlered image</returns>
        </member>
        <member name="M:VisionNET.Convolution.Convolve``1(VisionNET.IArrayHandler{System.Single},System.Single[0:,0:])">
            <summary>
            Convolves an image with the provided two-dimensional kernel.  This is done in the spatial
            domain, and as such is not as efficient as using an Fast Fourier Transform.
            </summary>
            <typeparam name="I">Any image whose pixel values are stored as floats</typeparam>
            <param name="image">Image to convolve</param>
            <param name="kernel">The two-dimensional kernel.</param>
            <returns>The filtered image</returns>
        </member>
        <member name="T:VisionNET.ZNPatches">
            <remarks>
            Class to compute zero-normalized patch descriptors.
            </remarks>
        </member>
        <member name="M:VisionNET.ZNPatches.Compute(System.Single[0:,0:])">
            <summary>
            Computes a zero-normalized patch descriptor from an image patch.
            </summary>
            <param name="patch">The patch to use for computation</param>
            <returns>The descriptor</returns>
        </member>
        <member name="T:VisionNET.HaarFeatures">
            <remarks>
            Utility class containing the Haar rectangle features for a provided square size.
            </remarks>
        </member>
        <member name="F:VisionNET.HaarFeatures.FEATURES">
            <summary>
            Each feature consists of a list of Rectangles which are alternatively added and subtracted from the final sum.
            </summary>
        </member>
        <member name="M:VisionNET.HaarFeatures.#cctor">
            <summary>
            Static constructor.  Builds the features.
            </summary>
        </member>
        <member name="M:VisionNET.HaarFeatures.SetSquareSize(System.Int32)">
            <summary>
            Set the square size which the rectangles are computed for.
            </summary>
            <param name="squareSize">The new square size</param>
        </member>
        <member name="P:VisionNET.HaarFeatures.SquareSize">
            <summary>
            The square size used when computing the rectangle features.
            </summary>
        </member>
        <member name="T:VisionNET.ScaleSpaceSampleMethod">
            <remarks>
            Method to use when sampling in scale space.
            </remarks>
        </member>
        <member name="F:VisionNET.ScaleSpaceSampleMethod.Uniform">
            <summary>
            Points are sampled uniformly across the space, thus finer scales are more likely than coarser ones.
            </summary>
        </member>
        <member name="F:VisionNET.ScaleSpaceSampleMethod.ScaleWeighted">
            <summary>
            Points are first sampled uniformly for scale and then for position, thus giving increasing weight to
            points in coarser scales.
            </summary>
        </member>
        <member name="T:VisionNET.ScaleSpaceSample">
            <remarks>
            Encapsulates the parameters of a scale-space sample.
            </remarks>
        </member>
        <member name="M:VisionNET.ScaleSpaceSample.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="octave">Octave of the pyramid</param>
            <param name="level">Level of the pyramid</param>
            <param name="row">Row of the image</param>
            <param name="column">Column of the image</param>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.ImageScale">
            <summary>
            Scale of the image for this sample in relation to the base of the pyramid.
            This scale is used such that <code>X = ImageScale*Column</code>, and similarly 
            <code>Y = ImageScale*Row</code>.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.X">
            <summary>
            Returns the scale-adjusted X-coordinate of the center of the sample.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.Y">
            <summary>
            Returns the scale-adjusted Y-coordinate of the center of the sample.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.Octave">
            <summary>
            Octave of the pyramid.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.Level">
            <summary>
            Level of the pyramid.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.Row">
            <summary>
            Row of the image.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpaceSample.Column">
            <summary>
            Column of the image.
            </summary>
        </member>
        <member name="T:VisionNET.ScaleSpacePyramid`1">
            <remarks>
            Class encapsulating a scale space pyramid.  A scale-space pyramid consists of several octaves of images.
            Every image in an octave is the same dimension, and these dimensions are half the size of the octave above's.
            Each octave is divided into a set of levels, images of the same dimension but convolved with Gaussians with
            sigmas of increasing size, such that the end of one octave is twice the sigma of the start, thus making it such
            that the next octave in the pyramid is a continuation of the previous.
            </remarks>
            <typeparam name="T">A float-based image type</typeparam>
        </member>
        <member name="F:VisionNET.ScaleSpacePyramid`1.INITIAL_SIGMA">
            <summary>
            Default initial sigma used at the base of each octave.
            </summary>
        </member>
        <member name="M:VisionNET.ScaleSpacePyramid`1.ComputeSigma(System.Int32,System.Int32)">
            <summary>
            Computes the sampling frequency (sigma) of the level and octave.
            </summary>
            <param name="octave">The octave of interest</param>
            <param name="level">The level of interest</param>
            <returns>The sigma</returns>
        </member>
        <member name="M:VisionNET.ScaleSpacePyramid`1.FindNearestLevel(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Finds the nearest octave and level in this pyramid to the specified sigma.
            </summary>
            <param name="sigma">Desired sigma</param>
            <param name="octave">Nearest octave</param>
            <param name="level">Nearest level</param>
        </member>
        <member name="M:VisionNET.ScaleSpacePyramid`1.CreateSample(System.Int32,System.Int32,System.Int32,VisionNET.ScaleSpaceSampleMethod)">
            <summary>
            Creates a scale-space sample given the provided sample size.
            </summary>
            <param name="method">Method to use when sampling scale-space</param>
            <param name="imageHeight">Height of the source image</param>
            <param name="imageWidth">Width of the source image</param>
            <param name="levels">Number of levels in each octave of the pyramid</param>
            <returns>The sample parameters</returns>
        </member>
        <member name="M:VisionNET.ScaleSpacePyramid`1.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a patch from the specified area of scale-space.
            </summary>
            <param name="octave">Desired octave of the pyramid</param>
            <param name="level">Desired level of the pyramid</param>
            <param name="row">Desired row of the image</param>
            <param name="column">Desired column of the image</param>
            <param name="columns">Desired width of the patch</param>
            <param name="rows">Desired height of the patch</param>
            <returns>A patch</returns>
        </member>
        <member name="M:VisionNET.ScaleSpacePyramid`1.Compute(`0,System.Int32)">
            <summary>
            Computes a scale-space pyramid from the source image using a default initial Gaussian with sigma of 
            2^(1/2).
            </summary>
            <param name="source">Source image</param>
            <param name="levels">Number of levels per octave</param>
            <returns>a scale-space pyramid</returns>
        </member>
        <member name="M:VisionNET.ScaleSpacePyramid`1.Compute(`0,System.Int32,System.Single)">
            <summary>
            Computes a scale-space pyramid from the source image.
            </summary>
            <param name="source">Source image</param>
            <param name="levels">Number of levels per octave</param>
            <param name="sigma">Sigma for the initial convolution Gaussian</param>
            <returns>A scale-space pyramid</returns>
        </member>
        <member name="P:VisionNET.ScaleSpacePyramid`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns the image at this octave and level in the pyramid.  Images within the pyramid are computed on-demand
            to increase run-time efficiency.
            </summary>
            <param name="octave">The desired octave</param>
            <param name="level">The desired level</param>
            <returns>An image from the pyramid</returns>
        </member>
        <member name="P:VisionNET.ScaleSpacePyramid`1.InitialSigma">
            <summary>
            Initial sigma used to blur the image.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpacePyramid`1.Octaves">
            <summary>
            Number of octaves in the pyramid.
            </summary>
        </member>
        <member name="P:VisionNET.ScaleSpacePyramid`1.Levels">
            <summary>
            Number of levels per octave.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.DecisionForest`1">
            <remarks>
            This class encapsulates a decision forest, which makes decisions based upon the consensus of a collection of decision trees.
            </remarks>
            <typeparam name="T">Any data type</typeparam>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.#ctor(VisionNET.DecisionForests.DecisionTree{`0}[],System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="trees">The trees in this forest</param>
            <param name="labelNames">The names associated with the labels this tree was trained with</param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.Clear">
            <summary>
            Clears all training data from every tree in the forest.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.RefreshMetadata">
            <summary>
            Refreshes the node metadata in all trees in the forest.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.Normalize">
            <summary>
            Normalizes the node distributions in the forest.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.Fill(VisionNET.Learning.LabeledImage{`0},VisionNET.Learning.BackgroundSampleMode)">
            <summary>
            Adds the data from <paramref name="image"/> to each tree in the forest.
            </summary>
            <param name="image">Image to learn from</param>
            <param name="mode">Mode to use when sampling the image background</param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.GetForestInfo">
            <summary>
            Returns all of the node metadata for this forest.
            </summary>
            <returns>The node metadata</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ComputeHistogram(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}})">
            <summary>
            Computes a histogram for all trees from the provided points.
            </summary>
            <param name="points">Points to classify</param>
            <returns>The histogram</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ComputeHistogram(VisionNET.IMultichannelImage{`0})">
            <summary>
            Computes a histogram for all trees from the provided image.
            </summary>
            <param name="image">Image to classify</param>
            <returns>The histogram</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ComputeHistogram(VisionNET.Learning.LabeledImage{`0})">
            <summary>
            Computes a histogram for all trees from the provided image.
            </summary>
            <param name="image">Image to classify</param>
            <returns>The histogram</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.Classify(VisionNET.IMultichannelImage{`0})">
            <summary>
            Classifies every pixel in the provided image with the maximum likelihood label.
            </summary>
            <param name="image">Image to classify</param>
            <returns>The classified image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ClassifySoft(VisionNET.IMultichannelImage{`0})">
            <summary>
            Classifies every pixel in the provided image, returning a full distribution over all labels.
            </summary>
            <param name="image">Image to classify</param>
            <returns>The classified image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ClassifySoft(VisionNET.Learning.LabeledImage{`0})">
            <summary>
            Classifies every pixel in the provided image, returning a full distribution over all labels.
            </summary>
            <param name="image">Image to classify</param>
            <returns>The classified image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ComputeLeafImage(VisionNET.IMultichannelImage{`0})">
            <summary>
            Classifies each pixel in the image and returns the leaf nodes which they end up in.
            </summary>
            <param name="image">Image to classify</param>
            <returns>A leaf image</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.GetNodeHistogram">
            <summary>
            Returns a histogram of the training data by node.
            </summary>
            <returns>An array of training data presence within each node in the forest</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.GetLeafNodes">
            <summary>
            Returns the metadata for the leaf nodes of the forest.
            </summary>
            <returns>An array of metadata</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.GetTrainingDataCount">
            <summary>
            Returns the total number of training pixels in the forest.
            </summary>
            <returns>The total number of training pixels in the forest</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ComputeDepthFirst(System.Int32,System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}}[],VisionNET.DecisionForests.IFeatureFactory{`0},System.Int32,System.Int32,System.String[],System.Single[])">
            <summary>
            Trains a decision forest from <paramref name="splits"/> based on the provided parameters using the depth first algorithm.
            </summary>
            <param name="numTrees">Number of trees in the forest</param>
            <param name="splits">Data splits to use when training the tree.</param>
            <param name="factory">The feature factory</param>
            <param name="numFeatures">The number of features to try for each node</param>
            <param name="numThresholds">The number of thresholds to try for each node</param>
            <param name="labelNames">The names for the labels</param>
            <param name="labelWeights">An array of weights for each label</param>
            <returns>The trained forest</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionForest`1.ComputeBreadthFirst(System.Int32,System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}}[],VisionNET.DecisionForests.IFeatureFactory{`0},System.Int32,System.Int32,System.String[],System.Single[],System.Single)">
            <summary>
            Trains a decision forest from <paramref name="splits"/> based on the provided parameters using the breadth first algorithm.
            </summary>
            <param name="numTrees">Number of trees in the forest</param>
            <param name="splits">Data splits to use when training the tree.</param>
            <param name="factory">The feature factory</param>
            <param name="numFeatures">The number of features to try for each node</param>
            <param name="numThresholds">The number of thresholds to try for each node</param>
            <param name="labelNames">The names for the labels</param>
            <param name="labelWeights">An array of weights for each label</param>
            <param name="threshold">The threshold to use to determine a "good" feature test</param>
            <returns>The trained forest</returns>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.TestsUsed">
            <summary>
            An array of the tests used in this forest.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.TestCounts">
            <summary>
            Counts for each test in the tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.LevelCount">
            <summary>
            The maximum number of levels in the trees in this forest.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.LabelNames">
            <summary>
            The names of the labels this tree was trained with.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.LeafCount">
            <summary>
            The total number of leaves in the tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.Item(System.Int32)">
            <summary>
            Indexes the trees in this forest.
            </summary>
            <param name="tree">The tree to retrieve</param>
            <returns>The desired tree</returns>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.TreeCount">
            <summary>
            The number of trees currently in use in the forest.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.TotalTrees">
            <summary>
            The total number of trees available to the forest.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionForest`1.LabelCount">
            <summary>
            The number of labels the forest was trained with.
            </summary>
        </member>
        <member name="T:VisionNET.Canny">
            <remarks>
            Computes the edges in an image using the Canny algorithm.
            </remarks>
        </member>
        <member name="F:VisionNET.Canny.LOWER_THRESHOLD">
            <summary>
            Default lower threshold for hysteresis.
            </summary>
        </member>
        <member name="F:VisionNET.Canny.HIGHER_THRESHOLD">
            <summary>
            Default higher threshold for hysteresis.
            </summary>
        </member>
        <member name="M:VisionNET.Canny.Compute(VisionNET.GradientImage)">
            <summary>
            Computes an edge image using the Canny algorithm from the provided gradient image.  Uses the
            default lower threshold and higher threshold.
            </summary>
            <param name="image">The image to use for edge-seeking</param>
            <returns>an edge image</returns>
        </member>
        <member name="M:VisionNET.Canny.Compute(VisionNET.GradientImage,System.Single,System.Single)">
            <summary>
            Computes an edge image using the provided image.  The lower threshold and higher threshold
            provided are those used for hysteresis, on a scale from 0 to 1.
            </summary>
            <param name="image">The image to use for edge-seeking</param>
            <param name="lowThreshold">The lower threshold for hysteresis, from 0 to 1</param>
            <param name="highThreshold">The higher threshold for hysteresis, from 0 to 1</param>
            <returns></returns>
        </member>
        <member name="T:VisionNET.IntegerArrayHandler">
            <remarks>
            Handles a three dimensional array of integer values.
            </remarks>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.#ctor">
            <summary>
            Constructor.  Creates a dimensionless array.
            </summary>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.#ctor(System.Int32[0:,0:,0:],System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Array to handle.</param>
            <param name="isIntegral">Whether <paramref name="data"/> is an integral array.</param>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.SetData(System.Int32[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.IntegerArrayHandler.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.IntegerArrayHandler.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.IntegerArrayHandler.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.IntegerArrayHandler.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.IntegerArrayHandler.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum is computed.
            </summary>
        </member>
        <member name="P:VisionNET.IntegerArrayHandler.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.IntegerArrayHandler.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="T:VisionNET.PPM">
            <remarks>
            Utility class with routines for reading the simple PPM image file format.
            </remarks>
        </member>
        <member name="M:VisionNET.PPM.Read(System.String)">
            <summary>
            Returns an RGB image version of the PPM file stored at <paramref name="filename"/>.
            </summary>
            <param name="filename">A PPM image file</param>
            <returns>An RGB image</returns>
        </member>
        <member name="T:VisionNET.Learning.ImageDataPoint`1">
            <remarks>
            This class represents a learning data point extracted from an image.  It encapsulates the source image, its label and position in that image,
            and also the most recent feature value computed for that point.
            </remarks>
            <typeparam name="T">The data type of the source image</typeparam>
        </member>
        <member name="M:VisionNET.Learning.ImageDataPoint`1.#ctor(VisionNET.IMultichannelImage{`0},System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Source image</param>
            <param name="row">Image row</param>
            <param name="column">Image column</param>
            <param name="label">Ground truth label</param>
        </member>
        <member name="M:VisionNET.Learning.ImageDataPoint`1.CompareTo(VisionNET.Learning.ImageDataPoint{`0})">
            <summary>
            Compares this point to <paramref name="other"/>.
            </summary>
            <param name="other">Point to compare to</param>
            <returns>Positive if this point is greater, negative if this point is less than, zero if equal</returns>
        </member>
        <member name="P:VisionNET.Learning.ImageDataPoint`1.ImageID">
            <summary>
            ID of the source image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ImageDataPoint`1.FeatureValue">
            <summary>
            The last feature value computed for this point.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ImageDataPoint`1.Image">
            <summary>
            Source image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ImageDataPoint`1.Row">
            <summary>
            Row from the source image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ImageDataPoint`1.Column">
            <summary>
            Column from the source image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.ImageDataPoint`1.Label">
            <summary>
            The ground truth label.
            </summary>
        </member>
        <member name="T:VisionNET.FloatArrayHandler">
            <remarks>
            Handles a three dimensional array of float values.
            </remarks>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.#ctor">
            <summary>
            Constructor.  Creates a dimensionless array.
            </summary>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.#ctor(System.Single[0:,0:,0:],System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Array to handle.</param>
            <param name="isIntegral">Whether <paramref name="data"/> is an integral array.</param>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.FloatArrayHandler.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.FloatArrayHandler.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum is computed.
            </summary>
        </member>
        <member name="P:VisionNET.FloatArrayHandler.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.FloatArrayHandler.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.FloatArrayHandler.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.FloatArrayHandler.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.FloatArrayHandler.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="T:VisionNET.Learning.RankPair`1">
            <remarks>
            Class encapsulating a pair of values where one is used to rank the pair within a list.
            </remarks>
            <typeparam name="T">Type of the non-ranking value</typeparam>
        </member>
        <member name="M:VisionNET.Learning.RankPair`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.RankPair`1.ToString">
            <summary>
            Returns a string representation of the pair as "label:rank".
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:VisionNET.Learning.RankPair`1.CompareTo(VisionNET.Learning.RankPair{`0})">
            <summary>
            Compares this pair to <paramref name="other"/>.
            </summary>
            <param name="other">The pair to compare to</param>
            <returns>A positive value if this is greater, negative if it is less than, and zero if equal</returns>
        </member>
        <member name="P:VisionNET.Learning.RankPair`1.Label">
            <summary>
            Non-ranking, label value.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.RankPair`1.Rank">
            <summary>
            Ranking value.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.LabelDictionary">
            <remarks>
            Class encapsulating a lookup dictionary for colors and labels.
            </remarks>
        </member>
        <member name="M:VisionNET.Learning.LabelDictionary.#ctor(System.String[],System.Windows.Media.Color[])">
            <summary>
            Constructor.
            </summary>
            <param name="labelNames">Names of the labels</param>
            <param name="colors">Colors corresponding to the labels</param>
        </member>
        <member name="M:VisionNET.Learning.LabelDictionary.Write(System.IO.Stream,VisionNET.Learning.LabelDictionary)">
            <summary>
            Writes <paramref name="dict"/> to <paramref name="stream"/>
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="dict">The dictionary to write</param>
        </member>
        <member name="M:VisionNET.Learning.LabelDictionary.Read(System.IO.Stream)">
            <summary>
            Reads a dictionary from <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream to read from</param>
            <returns>A label dictionary</returns>
        </member>
        <member name="P:VisionNET.Learning.LabelDictionary.Count">
            <summary>
            Number of labels in the dictionary.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelDictionary.LabelLookup">
            <summary>
            Lookup dictionary for colors to labels.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelDictionary.LabelNames">
            <summary>
            Names of the labels.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.NodeType">
            <remarks>
            Enumeration of node types.  A Leaf node is one with no children.
            </remarks>
        </member>
        <member name="F:VisionNET.DecisionForests.NodeType.Leaf">
            <summary>
            Leaf node, which has node children.
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.NodeType.Branch">
            <summary>
            Branch node, which has one or more children.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.INodeInfo`1">
            <remarks>
            Provides debugging information about a node.
            </remarks>
            <typeparam name="T">Any type, preferably one on which arithmetic operations are defined.</typeparam>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.TrainingDataCount">
            <summary>
            Amount of training data which arrived at this node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.NodeType">
            <summary>
            Type of the node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.Distribution">
            <summary>
            Class distribution at this node, computed from the training data.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.LeafNodeIndex">
            <summary>
            Leaf node index of the node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.Level">
            <summary>
            Level of the node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.Tree">
            <summary>
            Tree the node belongs to.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.LevelIndex">
            <summary>
            Index within the level.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.Entropy">
            <summary>
            Entropy of the distribution at this node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.TreeIndex">
            <summary>
            Index of the node within the tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.INodeInfo`1.TestInfo">
            <summary>
            Debugging information about the node's feature test. 
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.DecisionTree`1">
            <remarks>
            Class which encapsulates a decision tree which operates on images.
            </remarks>
            <typeparam name="T">A type which corresponds to the type of the images this tree will operate on</typeparam>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.SetTreeLabel(System.Byte,System.Int32)">
            <summary>
            Sets the label of a tree.
            </summary>
            <param name="label">The label to use for the tree</param>
            <param name="leafNodeStartIndex">The starting index for the leaf nodes in this tree</param>
            <returns>The maximum leaf node index in the tree</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.Classify(VisionNET.IMultichannelImage{`0})">
            <summary>
            Classifies each pixel of <paramref name="image"/> and produces a corresponding <see cref="T:LabelImage" />.  The maximum likelihood label
            is chosen at each pixel.
            </summary>
            <param name="image">Image to classify</param>
            <returns>A label image with all of the classifications</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.Classify(VisionNET.Learning.ImageDataPoint{`0})">
            <summary>
            Classifies an individual point.
            </summary>
            <param name="point">The point to classify</param>
            <returns>The maximum likelihood label for the point</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ClassifySoft(VisionNET.IMultichannelImage{`0})">
            <summary>
            Classifies <paramref name="image"/>, creating a distribution over all labels at each pixel.
            </summary>
            <param name="image">Image to classify</param>
            <returns>Distributions at each pixel</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ClassifySoft(VisionNET.Learning.LabeledImage{`0},VisionNET.Learning.DistributionImage)">
            <summary>
            Classifies points from <paramref name="labeledImage"/> (using the mask if present) and adds the distributions at each pixel to <paramref name="dist"/>.
            </summary>
            <param name="labeledImage">The image to classify</param>
            <param name="dist">Image which is used to store the distributions</param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ClassifySoft(VisionNET.IMultichannelImage{`0},VisionNET.Learning.DistributionImage)">
            <summary>
            Classifies each pixel in <paramref name="image"/> and stores the results in <paramref name="dist"/>.
            </summary>
            <param name="image">Image to classify</param>
            <param name="dist">Image which is used to store the distributions</param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ClassifySoft(VisionNET.Learning.ImageDataPoint{`0})">
            <summary>
            Classifies <paramref name="point"/>, producing a distribution over all pixel labels.
            </summary>
            <param name="point">Point to classify</param>
            <returns>A distribution over pixel labels</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ComputeHistogram(VisionNET.IMultichannelImage{`0})">
            <summary>
            Computes a tree histogram from <paramref name="image"/>.
            </summary>
            <param name="image">The image used to compute the tree histogram</param>
            <returns>A tree histogram</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ComputeHistogram(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}})">
            <summary>
            Computes a tree histogram from the list of points.
            </summary>
            <param name="points">Points to use when creating the tree histogram</param>
            <returns>A tree histogram</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.Clear">
            <summary>
            Clears the training data from the tree.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.Fill(VisionNET.Learning.LabeledImage{`0},VisionNET.Learning.BackgroundSampleMode)">
            <summary>
            Classifies each point from <paramref name="image"/> and trackes which nodes it visits.
            </summary>
            <param name="image">Image to add to the tree</param>
            <param name="mode">Mode to use when sampling the image</param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.Fill(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}})">
            <summary>
            Classifies each point in <paramref name="points"/> and trackes which nodes it visits.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.Normalize">
            <summary>
            Normalizes all of the node distributions in the tree.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ComputeDepthFirst(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}},VisionNET.DecisionForests.IFeatureFactory{`0},System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Constructs a new decision tree using the depth-first method.  This method will continue to split each node until there is less than <see cref="F:MinimumSupport" /> points
            in the node or <see cref="F:MaximumDepth" /> is reached, and then backtracks up the tree.
            </summary>
            <param name="data">The data to use when constructing the tree</param>
            <param name="factory">The feature factory to use for producing sample feature test for each node</param>
            <param name="numFeatures">The number of sample feature tests to try</param>
            <param name="numThresholds">The number of test thresholds to try with each test</param>
            <param name="numLabels">The number of possible labels for a point</param>
            <param name="labelWeights">The weights for each label</param>
            <returns>A new decision tree</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.ComputeBreadthFirst(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}},VisionNET.DecisionForests.IFeatureFactory{`0},System.Int32,System.Int32,System.Int32,System.Single[],System.Single)">
            <summary>
            Constructs a new decision tree using the breadth-first method.  This method will attempt to split each leaf node in the tree with each step, and will stop when
            <see cref="F:MaximumDepth" /> is reached or it is unable to split any leaf nodes.  If no nodes split in a step, it will try again <see cref="F:NumberOfTries" /> times, and then
            stop.  A node will only be split if the resulting entropy increase is above <paramref name="threshold"/>.
            </summary>
            <param name="data">The data to use when constructing the tree</param>
            <param name="factory">The feature factory to use for producing sample feature test for each node</param>
            <param name="numFeatures">The number of sample feature tests to try</param>
            <param name="numThresholds">The number of test thresholds to try with each test</param>
            <param name="numLabels">The number of possible labels for a point</param>
            <param name="labelWeights">The weights for each label</param>
            <param name="threshold">Threshold used to determine a good feature test</param>
            <returns>A new decision tree</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.FillNodeHistogram(System.Single[])">
            <summary>
            Fills <paramref name="histogram"/> with the training data count at each node.
            </summary>
            <param name="histogram">The histogram to fill</param>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.GetTrainingDataCount">
            <summary>
            Returns the amount of training data in the tree.
            </summary>
            <returns>The amount of training data.</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.DecisionTree`1.FillLeafNodes(VisionNET.DecisionForests.INodeInfo{`0}[])">
            <summary>
            Fills <paramref name="leafNodes"/> with the metadata information about this tree.
            </summary>
            <param name="leafNodes">The array to fill</param>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.MinimumSupport">
            <summary>
            Minimum number of training data points required in a node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.MinimumDepth">
            <summary>
            Minimum number of levels in a tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.MaximumDepth">
            <summary>
            Maximum number of levels in a tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.NumberOfTries">
            <summary>
            Number of times to try splitting a node.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.IsBuilding">
            <summary>
            Whether a tree is currently being built.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.LabelCount">
            <summary>
            Number of possible labels for data points.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.TestCounts">
            <summary>
            Counts of all the possible tests within a tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.LevelCount">
            <summary>
            Number of levels.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.NodeCount">
            <summary>
            Total number of nodes.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.NodeInfo">
            <summary>
            Info on all the nodes in the tree, indexed by tree index.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.LeafCount">
            <summary>
            Number of leaf nodes.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.TreeLabel">
            <summary>
            Label for this tree.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.DecisionTree`1.LabelWeights">
            <summary>
            Weights for the different class labels.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.LabelImage">
            <remarks>
            This class encapsulates an image with a hard label at each pixel.
            </remarks>
        </member>
        <member name="F:VisionNET.Learning.LabelImage.BackgroundLabel">
            <summary>
            The label equivalent to the background of an image, which has no specific label
            </summary>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows in the image</param>
            <param name="columns">Number of columns in the image</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.#ctor(System.String,VisionNET.Learning.LabelDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="filename">Color image in label image format</param>
            <param name="dictionary">Color dictionary lookup for interpreting the colors in the source image into labels</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.#ctor(System.Windows.Media.Imaging.BitmapSource,VisionNET.Learning.LabelDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Color image in label image format</param>
            <param name="dictionary">Color dictionary lookup for interpreting the colors in the source image into labels</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.#ctor(VisionNET.RGBImage,VisionNET.Learning.LabelDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Color image in label image format</param>
            <param name="dictionary">Color dictionary lookup for interpreting the colors in the source image into labels</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.Subsample(System.Int32)">
            <summary>
            Scales this image to another size using exact scaling (no interpolation).
            </summary>
            <param name="subsample">The sampling rate</param>
            <returns>The scaled image</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.Save(VisionNET.Learning.LabelDictionary,System.String)">
            <summary>
            Saves this image to file, looking up the labels in <paramref name="labels"/>.
            </summary>
            <param name="labels">Label lookup dictionary</param>
            <param name="filename">File to save the image to</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.GetLabelCounts">
            <summary>
            Returns the counts of each label.
            </summary>
            <returns>A list of label counts</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ExtractSegments">
            <summary>
            Extracts all segments within the image.  Each "segment" is a list of all points with a common label.
            </summary>
            <returns>The segments of the image, indexed by segment label</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ExtractSegment``1(System.Int16,VisionNET.IMultichannelImage{``0})">
            <summary>
            Extracts a segment from a provided image.
            </summary>
            <typeparam name="T">Type of <paramref name="image"/></typeparam>
            <param name="label">Label of the segment to extract</param>
            <param name="image">Image to extract the segment from</param>
            <returns>All the points in an image segment</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ToBitmap">
            <summary>
            Converts this image to a bitmap.  Not implemented.
            </summary>
            <returns>A bitmap version of the image</returns>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ToRGBImage(VisionNET.Learning.LabelDictionary)">
            <summary>
            Converts the label image to an RGB Image using <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">The label lookup dictionary</param>
            <returns>An RGB Image</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ComputeConfusionMatrix(System.Int32,VisionNET.Learning.LabelImage,VisionNET.Learning.LabelImage)">
            <summary>
            Computes a confusion matrix from <paramref name="inferredLabels"/> using <paramref name="trueLabels"/> as a reference.
            </summary>
            <param name="numLabels">The number of possible labels</param>
            <param name="trueLabels">The true labels of an image</param>
            <param name="inferredLabels">The inferred labels of an image</param>
            <returns>A confusion matrix</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ComputeConfusionMatrix(VisionNET.Learning.ConfusionMatrix,VisionNET.Learning.LabelImage,VisionNET.Learning.LabelImage)">
            <summary>
            Computes a confusion matrix from <paramref name="inferredLabels"/> using <paramref name="trueLabels"/> as a reference, and adds
            the information into <paramref name="matrix"/>.
            </summary>
            <param name="matrix">The matrix that will hold the results</param>
            <param name="trueLabels">The true labels of an image</param>
            <param name="inferredLabels">The inferred labels of an image</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.SetData(System.Int16[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.LabelImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Labels">
            <summary>
            The labels present within this image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Item(System.Int32,System.Int32)">
            <summary>
            Indexes the image.
            </summary>
            <param name="row">The pixel row</param>
            <param name="column">The pixel column</param>
            <returns>Pixel label</returns>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.Learning.LabelImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.ColorSpaceConverter">
            <remarks>
            A color space conversion method.  It is assumed that one of the 3-value color spaces is used.  
            For examples, see <see cref="T:VisionNET.ColorConversion"/>.
            </remarks>
            <param name="input1">Input value 1</param>
            <param name="input2">Input value 2</param>
            <param name="input3">Input value 3</param>
            <param name="output1">Output value 1</param>
            <param name="output2">Output value 2</param>
            <param name="output3">Output vlaue 3</param>
        </member>
        <member name="T:VisionNET.ColorImage">
            <remarks>
            A 3-channel color image.
            </remarks>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor(VisionNET.RGBImage,VisionNET.ColorSpaceConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="rgb">Source image</param>
            <param name="converter">Converter to use</param>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor(System.Windows.Media.Imaging.BitmapSource,VisionNET.ColorSpaceConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="bitmap">Source image</param>
            <param name="converter">Converter to use</param>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor(System.String,VisionNET.ColorSpaceConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="filename">Path to source image</param>
            <param name="converter">Converter to use</param>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor(System.String)">
            <summary>
            Constructor.  Uses the <see cref="M:VisionNET.ColorConversion.RGB2rgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)"/> converter.
            </summary>
            <param name="filename">Path to source image</param>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Constructor.  Uses the <see cref="M:VisionNET.ColorConversion.RGB2rgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)"/> converter.
            </summary>
            <param name="bitmap">Source image</param>
        </member>
        <member name="M:VisionNET.ColorImage.#ctor(VisionNET.RGBImage)">
            <summary>
            Constructor.  Uses the <see cref="M:VisionNET.ColorConversion.RGB2rgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)"/> converter.
            </summary>
            <param name="image">Source image</param>
        </member>
        <member name="M:VisionNET.ColorImage.ToRGBImage">
            <summary>
            Converts the image to an RGB image using the <see cref="M:VisionNET.ColorConversion.RGB2rgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)"/> converter.
            </summary>
            <returns>The converted image</returns>
        </member>
        <member name="M:VisionNET.ColorImage.ToRGBImage(VisionNET.ColorSpaceConverter)">
            <summary>
            Converts the image to an RGB image.
            </summary>
            <param name="converter">The converter to use.</param>
            <returns>The converted image</returns>
        </member>
        <member name="M:VisionNET.ColorImage.ToBitmap">
            <summary>
            Converts this image to a bitmap.
            </summary>
            <returns>A bitmap version of the image</returns>
        </member>
        <member name="M:VisionNET.ColorImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.ColorImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.ColorImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.ColorImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.ColorImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.ColorImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.ColorImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ColorImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.ColorImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.ColorConversion">
            <remarks>
            Color conversion routines for changing colors to and from the RGB color space to other color spaces.
            </remarks>
        </member>
        <member name="M:VisionNET.ColorConversion.HSV2RGB(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts HSV to RGB in place.
            </summary>
            <param name="h">hue</param>
            <param name="s">saturation</param>
            <param name="v">value</param>
            <param name="r">red (0-255)</param>
            <param name="g">green (0-255)</param>
            <param name="b">blue (0-255)</param>
        </member>
        <member name="M:VisionNET.ColorConversion.RGB2HSV(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts RGB to HSV in place.
            </summary>
            <param name="r">red (0-255)</param>
            <param name="g">green (0-255)</param>
            <param name="b">blue (0-255)</param>
            <param name="h">hue</param>
            <param name="s">saturation</param>
            <param name="v">value</param>
        </member>
        <member name="M:VisionNET.ColorConversion.RGB2YUV(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts RGB to YUV in place.
            </summary>
            <param name="r">red (0-255)</param>
            <param name="g">green (0-255)</param>
            <param name="b">blue (0-255)</param>
            <param name="y">y (luminance)</param>
            <param name="u">u (chrominance 1)</param>
            <param name="v">v (chromonance 2)</param>
        </member>
        <member name="M:VisionNET.ColorConversion.RGB2YUV(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts RGB to YUV in place using integer arithmetic.  Note: all values must fall between 0 and 255.
            </summary>
            <param name="r">red</param>
            <param name="g">green</param>
            <param name="b">blue</param>
            <param name="y">y (luminance)</param>
            <param name="u">u (chrominance 1)</param>
            <param name="v">v (chrominance 2)</param>
        </member>
        <member name="M:VisionNET.ColorConversion.YUV2RGB(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts YUV to RGB in place using integer arithmetic.  Note: all values must fall between 0 and 255.
            </summary>
            <param name="y">y (luminance)</param>
            <param name="u">u (chrominance 1)</param>
            <param name="v">v (chrominance 2)</param>
            <param name="r">red</param>
            <param name="g">green</param>
            <param name="b">blue</param>
        </member>
        <member name="M:VisionNET.ColorConversion.YUV2RGB(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts YUV to RGB in place.
            </summary>
            <param name="y">y (luminance)</param>
            <param name="u">u (chrominance 1)</param>
            <param name="v">v (chrominance 2)</param>
            <param name="r">red (0-255)</param>
            <param name="g">green (0-255)</param>
            <param name="b">blue (0-255)</param>
        </member>
        <member name="M:VisionNET.ColorConversion.RGB2Lab(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts RGB to CIEL*a*b* in place.
            </summary>
            <param name="R">red (0-255)</param>
            <param name="G">green (0-255)</param>
            <param name="B">blue (0-255)</param>
            <param name="L">Luminance</param>
            <param name="a">Greenness to Redness</param>
            <param name="b">Blueness to Yellowness</param>
        </member>
        <member name="M:VisionNET.ColorConversion.Lab2RGB(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts CIEL*a*b* to RGB in place.
            </summary>
            <param name="L">Luminance</param>
            <param name="a">Greenness to Redness</param>
            <param name="b">Blueness to Yellowness</param>
            <param name="R">red (0-255)</param>
            <param name="G">green (0-255)</param>
            <param name="B">blue (0-255)</param>
        </member>
        <member name="M:VisionNET.ColorConversion.RGB2rgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts RGB from a 0 to 255 scale to a 0 to 1 scale.
            </summary>
            <param name="R">red (0-255)</param>
            <param name="G">green (0-255)</param>
            <param name="B">blue (0-255)</param>
            <param name="r">red (0-1)</param>
            <param name="g">green (0-1)</param>
            <param name="b">blue (0-1)</param>
        </member>
        <member name="M:VisionNET.ColorConversion.rgb2RGB(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts RGB from a 0 to 1 scale to a 0 to 255 scale.
            </summary>
            <param name="r">red (0-1)</param>
            <param name="g">green (0-1)</param>
            <param name="b">blue (0-1)</param>
            <param name="R">red (0-255)</param>
            <param name="G">green (0-255)</param>
            <param name="B">blue (0-255)</param>
        </member>
        <member name="T:VisionNET.Learning.DistributionImage">
            <remarks>
            Encapsulates an image with a distribution over labels at each pixel.
            </remarks>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows in the image</param>
            <param name="columns">Number of columns in the image</param>
            <param name="numLabels">Number of possible labels</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.DivideThrough(System.Single)">
            <summary>
            Divides each value in the image by <paramref name="divisor"/>.
            </summary>
            <param name="divisor">The value by which to divide each value in the image</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Append(VisionNET.Learning.DistributionImage,VisionNET.Learning.DistributionImage)">
            <summary>
            Creates a new distribution image by appending the distributions at each pixel.
            </summary>
            <param name="lhs">The first image</param>
            <param name="rhs">The second image</param>
            <returns>The appended distribution image</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Add(System.Int32,System.Int32,System.Single[])">
            <summary>
            Adds a distribution to a pixel in the image.  <paramref name="distribution"/> needs to be the same dimension as this image.
            </summary>
            <param name="r">Row of the pixel</param>
            <param name="c">Column of the pixel</param>
            <param name="distribution">Distribution to add</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Subsample(System.Int32)">
            <summary>
            Subsamples this image.
            </summary>
            <param name="subsample">Value to subsample by</param>
            <returns>The subsampled distribution image</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Save(VisionNET.Learning.LabelDictionary,System.String)">
            <summary>
            Saves this image to disk by choosing the maximum likelihood label at each pixel and looking up colors using <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">Color lookup dictionary</param>
            <param name="filename">Filename to write the image to</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Multiply(System.Single[])">
            <summary>
            Multiplies the distribution at each pixel by <paramref name="distribution"/>, which must be of the same dimension as the image.
            </summary>
            <param name="distribution">Distribution by which to multiply</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Multiply(VisionNET.Learning.DistributionImage)">
            <summary>
            Multiplies each pixel's distribution in this image by each pixel's distribution in <paramref name="image"/>.
            </summary>
            <param name="image">Image to multiply by</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Normalize">
            <summary>
            Normalizes all the distributions in the image.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ComputeConfusionMatrix(VisionNET.Learning.LabelImage,VisionNET.Learning.DistributionImage)">
            <summary>
            Computes a confusion matrix using the soft values from the distributions in <paramref name="inferredLabels"/> based upon the ground truth 
            pixel labels in <paramref name="groundTruth"/>.
            </summary>
            <param name="groundTruth">The ground truth labels of the image</param>
            <param name="inferredLabels">The inferred labels of the image</param>
            <returns>A confusion matrix</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ComputeConfusionMatrix(VisionNET.Learning.ConfusionMatrix,VisionNET.Learning.LabelImage,VisionNET.Learning.DistributionImage)">
            <summary>
            Computes a confusion matrix using the soft values from the distributions in <paramref name="inferredLabels"/> based upon the ground truth 
            pixel labels in <paramref name="groundTruth"/>, and adds them to <paramref name="matrix"/>.
            </summary>
            <param name="matrix">Matrix to add the confusion values of this image to</param>
            <param name="groundTruth">The ground truth labels of the image</param>
            <param name="inferredLabels">The inferred labels of the image</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ToLabelImage">
            <summary>
            Converts to a label image using the maximum likelihood labels of this image's pixels.
            </summary>
            <returns>A label image</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ToBitmap">
            <summary>
            Converts this image to a bitmap.  Not implemented.
            </summary>
            <returns>A bitmap version of the image</returns>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.DistributionImage.GenerateLabels(VisionNET.Learning.LabelSet)">
            <summary>
            Creates a label image by sampling from the distribution.  Labels chosen are constricted to belong to <paramref name="set"/>, thus using it
            as a hard prior over labels.
            </summary>
            <param name="set">Set used to constrict the sampling</param>
            <returns>A label image</returns>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.Learning.DistributionImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.Evaluation">
            <summary>
            Class encapsulating tools for evaluating categorization algorithms.  In this case, they are curve based metrics, the Receiver Operating Characteristic
            Curve and the Precision/Recall curve.  For both, there is also a summary method, area under the curve and average precision respectively.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.Evaluation.#ctor(System.Collections.Generic.IEnumerable{VisionNET.Learning.RankPair{System.Boolean}})">
            <summary>
            Constructor.
            </summary>
            <param name="data">List of results, where a label of "true" indicates that the data point is a positive result (a member of the target category)</param>
        </member>
        <member name="M:VisionNET.Learning.Evaluation.WritePRCurve(System.String)">
            <summary>
            Writes the precision/recall curve to a file.  This is a tab-delimited file with a data point per line, recall first and then precision.
            </summary>
            <param name="filename">File to write the graph to</param>
        </member>
        <member name="M:VisionNET.Learning.Evaluation.WriteROCCurve(System.String)">
            <summary>
            Writes the receiver operator characteristic curve to a file.  This is a tab-delimited file with one data point per line, the false positive rate first and
            then the true positive rate.
            </summary>
            <param name="filename">File to write the graph to</param>
        </member>
        <member name="P:VisionNET.Learning.Evaluation.ROCCurve">
            <summary>
            The ordered list of graph points for the ROC Curve.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Evaluation.AuC">
            <summary>
            The area under the ROC curve.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Evaluation.PRCurve">
            <summary>
            The order list of graph points for the Precision/Recall curve.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Evaluation.AP">
            <summary>
            The average precision of the Precision/Recall curve.
            </summary>
        </member>
        <member name="T:VisionNET.InterpolationMethod">
            <remarks>
            Enumeration of the various methods that can be used for interpolation when scaling.
            </remarks>
        </member>
        <member name="F:VisionNET.InterpolationMethod.None">
            <summary>
            No interpolation is performed.
            </summary>
        </member>
        <member name="F:VisionNET.InterpolationMethod.Linear">
            <summary>
            Bi-linear interpolation is used.
            </summary>
        </member>
        <member name="F:VisionNET.InterpolationMethod.Cubic">
            <summary>
            Bi-cubic interpolation is used.
            </summary>
        </member>
        <member name="T:VisionNET.Transforms">
            <remarks>
            This class contains routines for image transformation and alteration.
            </remarks>
        </member>
        <member name="M:VisionNET.Transforms.AddNoise``1(``0,System.Single)">
            <summary>
            Adds Gaussian noise to an image without alterning the parameter.
            </summary>
            <typeparam name="I">The image type</typeparam>
            <param name="image">The image to use</param>
            <param name="sigma">Sigma of the gaussian noise distribution</param>
            <returns>A noisier image</returns>
        </member>
        <member name="M:VisionNET.Transforms.FlipHorizontal``1(``0)">
            <summary>
            Flips an image horizontally on its vertical axis.
            </summary>
            <typeparam name="I">Image type</typeparam>
            <param name="image">Image to flip</param>
            <returns>Flipped image</returns>
        </member>
        <member name="M:VisionNET.Transforms.FlipVertical``1(``0)">
            <summary>
            Flips an image vertically on its horizontal axis.
            </summary>
            <typeparam name="I">Image type</typeparam>
            <param name="image">Image to flip</param>
            <returns>Flipped image</returns>
        </member>
        <member name="M:VisionNET.Transforms.Scale``1(``0,System.Int32,System.Int32)">
            <summary>
            Returns a scaled version of an image using bi-linear interpolation.
            </summary>
            <typeparam name="I">Must inherit from MultichannelImage.</typeparam>
            <param name="image">The image to scale</param>
            <param name="rows">The desired number of rows</param>
            <param name="columns">The desired number of columns</param>
            <returns>The scaled image</returns>
        </member>
        <member name="M:VisionNET.Transforms.Scale``1(``0,System.Int32,System.Int32,VisionNET.InterpolationMethod)">
            <summary>
            Returns a scaled version of an image using provided method.
            </summary>
            <typeparam name="I">Must inherit from MultichannelImage.</typeparam>
            <param name="image">The image to scale</param>
            <param name="rows">The desired number of rows</param>
            <param name="columns">The desired number of columns</param>
            <param name="method">The method to use</param>
            <returns>The scaled image</returns>
        </member>
        <member name="M:VisionNET.Transforms.Scale``2(``0,System.Int32)">
            <summary>
            Scale an image through subsampling.
            </summary>
            <typeparam name="I">Type of the image to subsample</typeparam>
            <typeparam name="T">Underlying datatype of the image</typeparam>
            <param name="image">Image to subsample</param>
            <param name="subsample">Sampling rate</param>
            <returns>A scaled version of <paramref name="image"/></returns>
        </member>
        <member name="T:VisionNET.RGBImage">
            <remarks>
            A RGB image using bytes to store the values.
            </remarks>
        </member>
        <member name="M:VisionNET.RGBImage.#ctor">
            <summary>
            Constructor.  Constructs an empty image.
            </summary>
        </member>
        <member name="M:VisionNET.RGBImage.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="filename">Path to source image.</param>
        </member>
        <member name="M:VisionNET.RGBImage.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Constructor.
            </summary>
            <param name="bitmap">Source image.</param>
        </member>
        <member name="M:VisionNET.RGBImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
        </member>
        <member name="M:VisionNET.RGBImage.Save(System.String)">
            <summary>
            Saves the image to file, using the extension to determine the file format.
            </summary>
            <param name="filename">Path to destination file.</param>
        </member>
        <member name="M:VisionNET.RGBImage.ToBitmap">
            <summary>
            Returns a Bitmap version of this image.
            </summary>
            <returns>A Bitmap representing this image</returns>
        </member>
        <member name="M:VisionNET.RGBImage.Save(VisionNET.RGBImage,System.String)">
            <summary>
            Saves the provided image to the destination path using the extension to determine the file format.
            </summary>
            <param name="image">Image to save</param>
            <param name="filename">Path to destination image</param>
        </member>
        <member name="M:VisionNET.RGBImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.RGBImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.RGBImage.SetData(System.Byte[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.RGBImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.RGBImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.RGBImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.RGBImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.RGBImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="P:VisionNET.RGBImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Item(System.Int32,System.Int32,System.Char)">
            <summary>
            Returns the value requested by the character at (row,column).
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Channel</description>
            </listheader>
            <item><term>r,R</term>
            <description>Red</description></item>
            <item><term>g,G</term>
            <description>Green</description></item>
            <item><term>b,B</term>
            <description>Blue</description></item>
            </list>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="color">Desired color channel</param>
            <returns>color at (row,column)</returns>
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.RGBImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.RGBImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.Decision">
            <remarks>
            Enumeration which encapsulates the decisions that a feature test can make: whether to choose the left or right child.
            </remarks>
        </member>
        <member name="F:VisionNET.DecisionForests.Decision.Left">
            <summary>
            Choose the left tree.
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.Decision.Right">
            <summary>
            Choose the right tree.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.Decider`1">
            <remarks>
            A class which encapsulates the feature test.  It is a combination of a feature test and a threshold, and is able to compute quickly for a collection
            of points whether for each it should go to the left or right child of the node to which the decider is attached.
            </remarks>
            <typeparam name="T">The type of the decision tree node associated with this decider</typeparam>
        </member>
        <member name="T:VisionNET.DecisionForests.ITestInfo`1">
            <remarks>
            Provides debugging information about a feature.
            </remarks>
            <typeparam name="T">Any type, preferably one on which arithmetic operations are defined</typeparam>
        </member>
        <member name="P:VisionNET.DecisionForests.ITestInfo`1.Threshold">
            <summary>
            The threshold used for a feature.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.#ctor(VisionNET.DecisionForests.IFeatureFactory{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="factory">The factory to use to create the feature for this Decider</param>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.#ctor(VisionNET.DecisionForests.IFeature{`0},System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="feature">The feature to use with this decider</param>
            <param name="threshold">The threshold to use with this feature</param>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.ToString">
            <summary>
            Returns a string representation of the decider in the form "feature" "threshold".
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.SetData(System.Single[],System.Int16[])">
            <summary>
            Sets the data this decider will use to choose a threshold.
            </summary>
            <param name="values">The values to use</param>
            <param name="labels">The labels</param>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.ApplyFeature(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}})">
            <summary>
            Applies this decider's feature to all of the points, storing the value in the <see cref="T:ImageDataPoint.FeatureValue"/> property.
            </summary>
            <param name="points">Points to use when applying the feature</param>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.LoadData(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}})">
            <summary>
            Loads the data this decider will use for determining a threshold by applying the feature to each data point in <paramref name="data"/>.
            </summary>
            <param name="data">The data to use when choosing a threshold</param>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.ChooseThreshold(System.Int32,System.Int32,System.Single[],System.Single[]@,System.Single[]@)">
            <summary>
            Chooses a threshold based on <paramref name="labelWeights"/> from <paramref name="numThresholds"/> choices, and outputs the resulting label distributions
            for the left and right children in <paramref name="leftDistribution"/> and <paramref name="rightDistribution"/>, respectively.
            </summary>
            <param name="numThresholds">Number of thresholds to try</param>
            <param name="numLabels">Number of labels</param>
            <param name="labelWeights">Weights for each label</param>
            <param name="leftDistribution">Resulting label distribution for the right child if the chosen threshold is used</param>
            <param name="rightDistribution">Resulting label distribution for the right child if the chosen threshold is used</param>
            <returns>The entropy gain from using the chosen threshold</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.Decide(VisionNET.Learning.ImageDataPoint{`0})">
            <summary>
            Makes a decision (left or right child) for the <paramref name="point"/>.
            </summary>
            <param name="point">The point to make a decision about</param>
            <returns>Left or right child</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.Decide(System.Collections.Generic.List{VisionNET.Learning.ImageDataPoint{`0}})">
            <summary>
            Makes a decision (left or right child) for each point in <paramref name="points"/>.
            </summary>
            <param name="points">Points to make decision about</param>
            <returns>Whether to go to the left or right child for each provided point</returns>
        </member>
        <member name="M:VisionNET.DecisionForests.Decider`1.Compute(VisionNET.Learning.ImageDataPoint{`0})">
            <summary>
            Computes the feature for <paramref name="point"/>.
            </summary>
            <param name="point">Point to use when computing the feature</param>
            <returns>The computed feature value</returns>
        </member>
        <member name="P:VisionNET.DecisionForests.Decider`1.Feature">
            <summary>
            The underlying feature of this decider.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.Decider`1.Threshold">
            <summary>
            The threshold used for a feature.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.Decider`1.Name">
            <summary>
            The name of the feature.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.Decider`1.Cell0">
            <summary>
            First cell in the surrounding image used by the feature.
            </summary>
        </member>
        <member name="P:VisionNET.DecisionForests.Decider`1.Cell1">
            <summary>
            Second cell in the surrounding image used by the feature.
            </summary>
        </member>
        <member name="T:VisionNET.Comparison.PyramidMatch">
            <remarks>
            Encapsulates the pyramid match similarity metric, comparing two <see cref="T:VisionNET.Comparison.TreeHistogram"/> objects using all of their nodes with
            using histogram intersection and a weighted combination of level histograms.  See <see href="http://www.cs.utexas.edu/~grauman/research/projects/pmk/pmk_projectpage.htm">Grauman and Darrell</see>.
            for details.
            </remarks>
        </member>
        <member name="M:VisionNET.Comparison.PyramidMatch.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="numTrees">Number of trees in the histograms to be matched</param>
            <param name="numLevels">Number of levels in the histograms to be matched</param>
            <param name="normalized">Whether the histograms to be matched are normalized</param>
        </member>
        <member name="M:VisionNET.Comparison.PyramidMatch.Similarity(VisionNET.Comparison.TreeHistogram,VisionNET.Comparison.TreeHistogram)">
            <summary>
            Computes the similarity between two <see cref="T:VisionNET.Comparison.TreeHistogram"/> objects using the pyramid match method of <see href="http://www.cs.utexas.edu/~grauman/research/projects/pmk/pmk_projectpage.htm">Grauman and Darrell</see>.
            </summary>
            <param name="lhs">First histogram</param>
            <param name="rhs">Second histogram</param>
            <returns>A value between 0 and 1 indicating the similarity of the two histograms</returns>
        </member>
        <member name="M:VisionNET.Comparison.PyramidMatch.Read(System.IO.Stream)">
            <summary>
            Reads a PyramidMatch object from <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream containing the encoded PyramidMatch object</param>
            <returns>A PyramidMatch object</returns>
        </member>
        <member name="M:VisionNET.Comparison.PyramidMatch.Write(System.IO.Stream,VisionNET.Comparison.PyramidMatch)">
            <summary>
            Writes <paramref name="match"/> to <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="match">The object to write</param>
        </member>
        <member name="P:VisionNET.Comparison.PyramidMatch.HistogramsAreNormalized">
            <summary>
            Returns whether the histograms being passed to the Similarity method are assumed to be normalized.
            </summary>
        </member>
        <member name="P:VisionNET.Comparison.PyramidMatch.TreeCount">
            <summary>
            Number of trees in the histograms to be matched.
            </summary>
        </member>
        <member name="P:VisionNET.Comparison.PyramidMatch.LevelCount">
            <summary>
            Number of levels in the histograms to be matched.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.BinaryCombination">
            <remarks>
            Enumeration of the different kinds of pixel combinations.
            </remarks>
        </member>
        <member name="F:VisionNET.DecisionForests.BinaryCombination.Subtract">
            <summary>
            Subtracts one pixel from another
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.BinaryCombination.Add">
            <summary>
            Adds two pixels together
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.BinaryCombination.Multiply">
            <summary>
            Multiplies two pixels together
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.BinaryCombination.Divide">
            <summary>
            Divides one pixel by another
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.BinaryCombination.Log">
            <summary>
            Multiplies one pixel by the log of the other.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.BinaryFeatureFactory">
            <remarks>
            Factory which creates features that combine two pixels within the image.
            </remarks>
        </member>
        <member name="M:VisionNET.DecisionForests.BinaryFeatureFactory.#ctor(System.Int32,System.Int32,System.Int32,VisionNET.DecisionForests.BinaryCombination,System.Boolean,VisionNET.DecisionForests.OutputModifier)">
            <summary>
            Constructor.
            </summary>
            <param name="boxRows">Rows in the box around a data point to sample points</param>
            <param name="boxColumns">Rows in the box around a data point to sample points</param>
            <param name="numChannels">Number of channels to sample from</param>
            <param name="combo">Which binary combination to use</param>
            <param name="mixChannels">Whether to mix one channel with another, or to choose both points from the same channel</param>
            <param name="modifier">Modifier on the output of the feature</param>
        </member>
        <member name="M:VisionNET.DecisionForests.BinaryFeatureFactory.Create">
            <summary>
            Creates a new feature.
            </summary>
            <returns>An object which implements <see cref="T:IFeature" /></returns>
        </member>
        <member name="M:VisionNET.DecisionForests.BinaryFeatureFactory.IsProduct(VisionNET.DecisionForests.IFeature{System.Single})">
            <summary>
            Returns whether <paramref name="feature"/> is a product of this factory.
            </summary>
            <param name="feature">Feature to test</param>
            <returns>True if it came from this factory, false otherwise.</returns>
        </member>
        <member name="T:VisionNET.ShortArrayHandler">
            <remarks>
            Handles a three dimensional array of short values.
            </remarks>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.#ctor">
            <summary>
            Constructor.  Creates a dimensionless array.
            </summary>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.#ctor(System.Int16[0:,0:,0:],System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Array to handle.</param>
            <param name="isIntegral">Whether <paramref name="data"/> is an integral array</param>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.SetData(System.Int16[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.ShortArrayHandler.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.ShortArrayHandler.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ShortArrayHandler.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ShortArrayHandler.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ShortArrayHandler.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum is computed.
            </summary>
        </member>
        <member name="P:VisionNET.ShortArrayHandler.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.ShortArrayHandler.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="T:VisionNET.Learning.DataCategory">
            <remarks>
            Enumeration of the categories of data as regards a learning algorithm
            </remarks>
        </member>
        <member name="F:VisionNET.Learning.DataCategory.Training">
            <summary>
            Training data, seen by the learning algorithm during the training period
            </summary>
        </member>
        <member name="F:VisionNET.Learning.DataCategory.Validation">
            <summary>
            Validation data, used by the learning algorithm to set parameters or as additional training data
            </summary>
        </member>
        <member name="F:VisionNET.Learning.DataCategory.Test">
            <summary>
            Unseen data drawn from the same distribution as the training and validation data, used for evaluation.
            </summary>
        </member>
        <member name="F:VisionNET.Learning.DataCategory.Heldout">
            <summary>
            Unseen data of a completely different nature from the training, validation and test data but still
            pertinent to the domain of the learning algorithm.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.Split">
            <remarks>
            Encapsulates a compartmentalization of a dataset into training, validation and test data.
            </remarks>
        </member>
        <member name="M:VisionNET.Learning.Split.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.  Each file pointed to by the parameters has one filename per line.
            </summary>
            <param name="trainFile">File containing the training image filenames</param>
            <param name="valFile">File containing the validation image filenames</param>
            <param name="testFile">File containing the test image filenames</param>
        </member>
        <member name="M:VisionNET.Learning.Split.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor.  The collection parameters contain data file IDs without file extensions.
            </summary>
            <param name="train">Training ID collection</param>
            <param name="val">Validation ID collection</param>
            <param name="test">Test ID collection</param>
        </member>
        <member name="M:VisionNET.Learning.Split.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.Split.Add(System.String,VisionNET.Learning.DataCategory)">
            <summary>
            Adds <paramref name="id"/> to the split under <paramref name="category"/>.
            </summary>
            <param name="id">Data id</param>
            <param name="category">Data category</param>
        </member>
        <member name="P:VisionNET.Learning.Split.All">
            <summary>
            Returns all data ids.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Split.Train">
            <summary>
            Returns training ids.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Split.TrainVal">
            <summary>
            Returns both training and validation ids.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Split.Val">
            <summary>
            Returns validation ids.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.Split.Test">
            <summary>
            Returns test ids.
            </summary>
        </member>
        <member name="T:VisionNET.Comparison.SimilarityMetric`1">
            <remarks>
            A method which compares two items and returns a high value if they are similar, and a low value if they are dissimilar.  Convention scales this
            value between 0 and 1.
            </remarks>
            <typeparam name="T">Any type</typeparam>
            <param name="lhs">The first item</param>
            <param name="rhs">The second item</param>
            <returns>High value if similar, low value if dissimilar</returns>
        </member>
        <member name="T:VisionNET.Comparison.SimilarityMatrix`1">
            <remarks>
            Encapsulates the similarity between two lists of items all of the same type.  Similarity is encoded as a float, where a high value indicates
            high similarity and a low value, low similarity (convention scales this value between 0 and 1).  The value at (r,c) indicates the similarity between item 'r' in the first list and item 'c'
            in the second list.
            </remarks>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="M:VisionNET.Comparison.SimilarityMatrix`1.#ctor(System.Single[0:,0:])">
            <summary>
            Creates a similarity matrix from <paramref name="similarityMatrix"/>
            </summary>
            <param name="similarityMatrix">The values to use for this matrix</param>
        </member>
        <member name="M:VisionNET.Comparison.SimilarityMatrix`1.Compare(`0[],`0[],VisionNET.Comparison.SimilarityMetric{`0})">
            <summary>
            Compares two arrays of items.
            </summary>
            <param name="lhs">First array</param>
            <param name="rhs">Second array</param>
            <param name="metric">Metric to use</param>
            <returns>A similarity matrix</returns>
        </member>
        <member name="M:VisionNET.Comparison.SimilarityMatrix`1.Compare(`0[],VisionNET.Comparison.SimilarityMetric{`0})">
            <summary>
            Compares an array of items to itself.
            </summary>
            <param name="items">Item array</param>
            <param name="metric">Metric to use</param>
            <returns>Similarity matrix</returns>
        </member>
        <member name="M:VisionNET.Comparison.SimilarityMatrix`1.Compare(System.Collections.Generic.Dictionary{System.String,`0},System.Collections.Generic.List{System.String},VisionNET.Comparison.SimilarityMetric{`0})">
            <summary>
            Creates a similarity matrix by comparing a list of items against themselves.  Thus, the result is a symmetric matrix with a diagonal of the maximum value
            for <paramref name="metric"/>.  The values themselves are stored in a lookup dictionary.
            </summary>
            <param name="itemLookup">Stores the values</param>
            <param name="members">The members to compare</param>
            <param name="metric">The metric to use</param>
            <returns>A similarity matrix</returns>
        </member>
        <member name="M:VisionNET.Comparison.SimilarityMatrix`1.Compare(System.Collections.Generic.Dictionary{System.String,`0},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},VisionNET.Comparison.SimilarityMetric{`0})">
            <summary>
            Creates a similarity matrix between two list of items.  The values themselves are stored in a lookup dictionary.
            </summary>
            <param name="itemLookup">Stores the values</param>
            <param name="lhs">First list of items</param>
            <param name="rhs">Second list of items</param>
            <param name="metric">The metric to use</param>
            <returns>A similarity matrix</returns>
        </member>
        <member name="M:VisionNET.Comparison.SimilarityMatrix`1.op_Implicit(VisionNET.Comparison.SimilarityMatrix{`0})~System.Single[0:,0:]">
            <summary>
            Translates a similarity matrix into a two dimension float array.
            </summary>
            <param name="matrix">Matrix to convert</param>
            <returns>A float array</returns>
        </member>
        <member name="P:VisionNET.Comparison.SimilarityMatrix`1.Rows">
            <summary>
            Rows in the matrix (number of items in the first list)
            </summary>
        </member>
        <member name="P:VisionNET.Comparison.SimilarityMatrix`1.Columns">
            <summary>
            Columns in the matrix (number of items in the second list)
            </summary>
        </member>
        <member name="P:VisionNET.Comparison.SimilarityMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexes this matrix.
            </summary>
            <param name="row">Item in first list</param>
            <param name="column">Item in second list</param>
            <returns>The similarity between item <paramref name="row"/> and item <paramref name="column"/></returns>
        </member>
        <member name="T:VisionNET.Comparison.RBF">
            <remarks>
            Encapsulates the radial basis function acting upon the leaf nodes of a <see cref="T:VisionNET.Comparison.TreeHistogram"/>.
            </remarks>
        </member>
        <member name="M:VisionNET.Comparison.RBF.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="gamma">Gamma to use in the radial basis function.</param>
        </member>
        <member name="M:VisionNET.Comparison.RBF.Similarity(VisionNET.Comparison.TreeHistogram,VisionNET.Comparison.TreeHistogram)">
            <summary>
            Computes the similarity between <paramref name="lhs"/> and <paramref name="rhs"/> using
            a radial basis fuction computed on their leaf nodes.
            </summary>
            <param name="lhs">The first histogram</param>
            <param name="rhs">The second histogram</param>
            <returns>A value between 0 and 1 indicating the similarity between these histograms</returns>
        </member>
        <member name="P:VisionNET.Comparison.RBF.Gamma">
            <summary>
            Gamma of the radial basis function.
            </summary>
        </member>
        <member name="T:VisionNET.ColorSpaceConverters">
            <remarks>
            Convenience class with static members for the color space converters supported natively by Vision.NET.
            </remarks>
        </member>
        <member name="P:VisionNET.ColorSpaceConverters.RGB2YUV">
            <summary>
            Converts RGB to YUV.
            </summary>
        </member>
        <member name="P:VisionNET.ColorSpaceConverters.RGB2HSV">
            <summary>
            Converts RGB to HSV.
            </summary>
        </member>
        <member name="P:VisionNET.ColorSpaceConverters.RGB2Lab">
            <summary>
            Converts RGB to Lab.
            </summary>
        </member>
        <member name="P:VisionNET.ColorSpaceConverters.Lab2RGB">
            <summary>
            Converts Lab to RGB.
            </summary>
        </member>
        <member name="P:VisionNET.ColorSpaceConverters.HSV2RGB">
            <summary>
            Converts HSV to RGB.
            </summary>
        </member>
        <member name="P:VisionNET.ColorSpaceConverters.YUV2RGB">
            <summary>
            Converts YUV to RGB.
            </summary>
        </member>
        <member name="T:VisionNET.ByteArrayHandler">
            <remarks>
            Handles a three dimensional array of byte values.
            </remarks>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.#ctor">
            <summary>
            Constructor.  Creates a dimensionless array.
            </summary>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.#ctor(System.Byte[0:,0:,0:])">
            <summary>
            Constructor.
            </summary>
            <param name="data">Array to handle.</param>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.SetData(System.Byte[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.ByteArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="P:VisionNET.ByteArrayHandler.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ByteArrayHandler.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ByteArrayHandler.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.ByteArrayHandler.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.ByteArrayHandler.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.ByteArrayHandler.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum is computed.
            </summary>
        </member>
        <member name="T:VisionNET.IntegralImage">
            <remarks>
            Computes the integral image of a source image in multiple dimensions, and is able to compute
            rectangle sums both globally and within a window of interest.
            </remarks>
        </member>
        <member name="M:VisionNET.IntegralImage.ComputeFloat``1(VisionNET.IArrayHandler{System.Single})">
            <summary>
            Computes an integral image in one pass from the source image.
            </summary>
            <param name="input">Source image</param>
            <returns>Integral image</returns>
        </member>
        <member name="M:VisionNET.IntegralImage.ComputeInteger``1(VisionNET.IArrayHandler{System.Int32})">
            <summary>
            Computes an integral image in one pass from the source image.
            </summary>
            <param name="input">Source image</param>
            <returns>Integral image</returns>
        </member>
        <member name="T:VisionNET.DecisionForests.HaarFeatureFactory">
            <remarks>
            Factory which creates Haar-like features.  These operate on integral images for computational efficiency.  See Viola and Jones for details.
            </remarks>
        </member>
        <member name="M:VisionNET.DecisionForests.HaarFeatureFactory.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="squareSize">Size of the square to build the Haar-like Feature within.</param>
            <param name="numChannels">Number of channels to sample from</param>
            <param name="mixChannels">Whether to allow the mixing channels when computing the difference</param>
        </member>
        <member name="M:VisionNET.DecisionForests.HaarFeatureFactory.Create">
            <summary>
            Creates a new feature.
            </summary>
            <returns>An object which implements <see cref="T:IFeature" /></returns>
        </member>
        <member name="M:VisionNET.DecisionForests.HaarFeatureFactory.IsProduct(VisionNET.DecisionForests.IFeature{System.Single})">
            <summary>
            Returns whether <paramref name="feature"/> is a product of this factory.
            </summary>
            <param name="feature">Feature to test</param>
            <returns>True if it came from this factory, false otherwise.</returns>
        </member>
        <member name="T:VisionNET.ThreadsafeRandom">
            <remarks>
            The .NET Random class will create hard to trace, truly heinous bugs if called asynchronously from multiple threads.  In order to avoid this, I have
            included this class for those who need to do so.  Also, it has several utility methods for those who want to generate more than a random integer
            or double value.
            </remarks>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.SelectRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects a random member of a list.  This is an extension method for all classes which implement <see cref="T:IEnumerable"/>.
            </summary>
            <typeparam name="T">Type of the list</typeparam>
            <param name="list">The list from which to select</param>
            <returns>A random member of the list</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.Initialize(System.Int32)">
            <summary>
            Initializes the randomizer with <paramref name="newSeed"/>.
            </summary>
            <param name="newSeed">The new seed to use</param>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.NextDouble">
            <summary>
            Generates a random double.
            </summary>
            <returns>A random double value</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.Next">
            <summary>
            Generates a random integer.
            </summary>
            <returns>A random integer value</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random integer in the range of <paramref name="minValue"/> to <paramref name="maxValue"/>.
            </summary>
            <param name="minValue">The minimum value to generate</param>
            <param name="maxValue">The maximum value to generate</param>
            <returns>A random integer</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.Next(System.Int32)">
            <summary>
            Generates a random integer between 0 and <paramref name="maxValue"/>.
            </summary>
            <param name="maxValue">The maximum value to generate</param>
            <returns>A random integer</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.NextFloat(System.Single)">
            <summary>
            Generates a random float between 0 and <paramref name="maxValue"/>.
            </summary>
            <param name="maxValue">The maximum value to generate</param>
            <returns>A random float</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.NextFloat(System.Single,System.Single)">
            <summary>
            Generates a random float in the range of <paramref name="minValue"/> to <paramref name="maxValue"/>.
            </summary>
            <param name="minValue">The minimum value to generate</param>
            <param name="maxValue">The maximum value to generate</param>
            <returns>A random float</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.NextFloat">
            <summary>
            Generates a random float.
            </summary>
            <returns>A random float value</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.NextDouble(System.Double)">
            <summary>
            Generates a random double between 0 and <paramref name="maxValue"/>.
            </summary>
            <param name="maxValue">The maximum value to generate</param>
            <returns>A random double</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Generates a random double in the range of <paramref name="minValue"/> to <paramref name="maxValue"/>.
            </summary>
            <param name="minValue">The minimum value to generate</param>
            <param name="maxValue">The maximum value to generate</param>
            <returns>A random double</returns>
        </member>
        <member name="M:VisionNET.ThreadsafeRandom.Test(System.Double)">
            <summary>
            Returns true if a random value is less than <paramref name="threshold"/>.
            </summary>
            <param name="threshold">A threshold between 0 and 1</param>
            <returns>True if a random value is less than <paramref name="threshold"/>, false if otherwise</returns>
        </member>
        <member name="T:VisionNET.Filter">
            <remarks>
            Convolution filter which is computed over a patch.
            </remarks>
        </member>
        <member name="M:VisionNET.Filter.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="filterValues">Array of filter values</param>
            <param name="channel">Channel to compute filter on</param>
        </member>
        <member name="M:VisionNET.Filter.GetRepresentation">
            <summary>
            Returns a grayscale representation of the filter.
            </summary>
            <returns>A grayscale representation of the filter</returns>
        </member>
        <member name="M:VisionNET.Filter.Compute``1(VisionNET.ScaleSpaceSample,VisionNET.ScaleSpacePyramid{``0})">
            <summary>
            Computes filter by multiplying the filter values against the patch values.  If the patch or filter
            sizes do not match up, the two will be centered on each other and computation done on overlapping
            indices.
            </summary>
            <param name="sample">Sample to compute</param>
            <param name="pyramid">Pyramid to use for computation</param>
            <returns>Filter response for the desired sample</returns>
        </member>
        <member name="P:VisionNET.Filter.Rows">
            <summary>
            Number of rows in the filter.
            </summary>
        </member>
        <member name="P:VisionNET.Filter.Columns">
            <summary>
            Number of columns in the filter.
            </summary>
        </member>
        <member name="T:VisionNET.GaussianFilter">
            <remarks>
            A Gaussian filter.
            </remarks>
        </member>
        <member name="M:VisionNET.GaussianFilter.#ctor(System.Single,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="stddev">Standard deviation of the mean</param>
            <param name="channel">Channel to use when computing filter response</param>
        </member>
        <member name="M:VisionNET.GaussianFilter.ComputeFilter(System.Single)">
            <summary>
            Computes a 2-dimensional convolution filter for the provided sigma.
            </summary>
            <param name="stddev">Standard deviation of the Gaussian second derivative</param>
            <returns>Convolution filter</returns>
        </member>
        <member name="T:VisionNET.FilterDirection">
            <remarks>
            Direction of filter.
            </remarks>
        </member>
        <member name="F:VisionNET.FilterDirection.Horizontal">
            <summary>
            Filter is oriented horizontally.
            </summary>
        </member>
        <member name="F:VisionNET.FilterDirection.Vertical">
            <summary>
            Filter is oriented vertically.
            </summary>
        </member>
        <member name="T:VisionNET.GaussianFirstDerivativeFilter">
            <remarks>
            A filter based on the first derivative of a Gaussian.
            </remarks>
        </member>
        <member name="M:VisionNET.GaussianFirstDerivativeFilter.#ctor(System.Single,VisionNET.FilterDirection,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="stddev">The standard deviation of the mean</param>
            <param name="direction">Direction of the filter</param>
            <param name="channel">Channel to apply filter to</param>
        </member>
        <member name="M:VisionNET.GaussianFirstDerivativeFilter.ComputeFilter(System.Single,VisionNET.FilterDirection)">
            <summary>
            Computes a 2-dimensional convolution filter for the provided sigma.
            </summary>
            <param name="stddev">Standard deviation of the Gaussian second derivative</param>
            <param name="direction">Direction of the filter</param>
            <returns>Convolution filter</returns>
        </member>
        <member name="T:VisionNET.GaussianSecondDerivativeFilter">
            <remarks>
            Filter based on the second deriviative of a Gaussian.
            </remarks>
        </member>
        <member name="M:VisionNET.GaussianSecondDerivativeFilter.#ctor(System.Single,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="stddev">Standard deviation of the mean</param>
            <param name="channel">Channel to apply filter to</param>
        </member>
        <member name="M:VisionNET.GaussianSecondDerivativeFilter.ComputeFilter(System.Single)">
            <summary>
            Computes a 2-dimensional convolution filter for the provided sigma.
            </summary>
            <param name="stddev">Standard deviation of the Gaussian second derivative</param>
            <returns>Convolution filter</returns>
        </member>
        <member name="T:VisionNET.FilterBank">
            <remarks>
            Calculates a descriptor as an array of filter responses for a patch.
            </remarks>
        </member>
        <member name="M:VisionNET.FilterBank.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.FilterBank.#ctor(VisionNET.Filter[])">
            <summary>
            Constructor.
            </summary>
            <param name="filters">Filters to use when creating the bank</param>
        </member>
        <member name="M:VisionNET.FilterBank.AddFilter(VisionNET.Filter)">
            <summary>
            Adds a new filter to the bank.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:VisionNET.FilterBank.RemoveFilter(VisionNET.Filter)">
            <summary>
            Removes a filter from the bank.
            </summary>
            <param name="f">Filter to remove</param>
        </member>
        <member name="M:VisionNET.FilterBank.Compute``1(System.Collections.Generic.List{VisionNET.ScaleSpaceSample},VisionNET.ScaleSpacePyramid{``0})">
            <summary>
            Computes the descriptor as an array of filter responses.
            </summary>
            <param name="samples">Samples to compute the filter bank response for</param>
            <param name="pyramid">Pyramid to use when computing responses</param>
            <returns>Filter bank descriptor</returns>
        </member>
        <member name="P:VisionNET.FilterBank.Item(System.Int32)">
            <summary>
            Indexes the filters in this filter bank.
            </summary>
            <param name="index">Index of the filter</param>
            <returns>A filter</returns>
        </member>
        <member name="P:VisionNET.FilterBank.Count">
            <summary>
            Number of filters in the bank.
            </summary>
        </member>
        <member name="P:VisionNET.FilterBank.IdealPatchSize">
            <summary>
            The ideal patch size to be used for this filter bank.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.CombinationFeatureFactory`1">
            <remarks>
            A feature factory made up of other feature factories.  A random factory is chosen
            </remarks>
            <typeparam name="T">Any data type</typeparam>
        </member>
        <member name="M:VisionNET.DecisionForests.CombinationFeatureFactory`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.DecisionForests.CombinationFeatureFactory`1.AddFactory(VisionNET.DecisionForests.IFeatureFactory{`0})">
            <summary>
            Adds <paramref name="factory"/> to the list of factories this combination factory will choose from.
            </summary>
            <param name="factory">Factory to add</param>
        </member>
        <member name="M:VisionNET.DecisionForests.CombinationFeatureFactory`1.RemoveFactory(VisionNET.DecisionForests.IFeatureFactory{`0})">
            <summary>
            Removes <paramref name="factory"/> from the list of factories this combination factory chooses from.
            </summary>
            <param name="factory">Factory to remove</param>
        </member>
        <member name="M:VisionNET.DecisionForests.CombinationFeatureFactory`1.Create">
            <summary>
            Creates a new feature.
            </summary>
            <returns>An object which implements <see cref="T:IFeature" /></returns>
        </member>
        <member name="M:VisionNET.DecisionForests.CombinationFeatureFactory`1.IsProduct(VisionNET.DecisionForests.IFeature{`0})">
            <summary>
            Returns whether <paramref name="feature"/> is a product of this factory.
            </summary>
            <param name="feature">Feature to test</param>
            <returns>True if it came from this factory, false otherwise.</returns>
        </member>
        <member name="T:VisionNET.Harris">
            <remarks>
            Computes the corners of the image using the Harris algorithm.
            </remarks>
        </member>
        <member name="M:VisionNET.Harris.Extract(VisionNET.GradientImage)">
            <summary>
            Extracts corners from the gradient image using the default threshold.
            </summary>
            <param name="grad">Gradient image of source</param>
            <returns>A list of corners</returns>
        </member>
        <member name="M:VisionNET.Harris.Extract(VisionNET.GradientImage,System.Single)">
            <summary>
            Extracts corners from the gradient image.  The method used here is one which uses the eigensystem at each
            pixel (computed from the smoothed second moments) to determine whether a corner is present.  A corner is
            one in which both eigenvalues are above the threshold.
            </summary>
            <param name="grad">Gradient image of source</param>
            <param name="threshold">Threshold used to determine corners</param>
            <returns>A list of corners</returns>
        </member>
        <member name="T:VisionNET.EigensystemImage">
            <remarks>
            Image encapsulating the second moment eigensystem information of an image.  This eigensystem contains important information
            about the gradient of an image.  The eigenvectors will give the two dominant gradient directions, and their corresponding
            eigenvalues give the strength of those gradients.  Thus, at an edge one eigenvalue will be dominant, at a corner both will
            be dominant, and at a uniform region both will be near zero.  Each pixel of the image has a dimensionality of 6, encoded as
            (eigenvalue1, eigenvalue2, eigenvector1x, eigenvector1y, eigenvector2x, eigenvector2y).  When converted to a Bitmap, the
            image will show red at corners, blue at uniform regions, and green at edges.
            </remarks>
        </member>
        <member name="F:VisionNET.EigensystemImage.SENSITIVITY">
            <summary>
            The default sensitivity value.
            </summary>
        </member>
        <member name="M:VisionNET.EigensystemImage.#ctor">
            <summary>
            Constructor.  Creates an empty image.
            </summary>
        </member>
        <member name="M:VisionNET.EigensystemImage.Compute(VisionNET.SecondMomentImage)">
            <summary>
            Computes the eigensystem image from the second moment image provided.  The moments are 
            convolved with a default sigma of 1.
            </summary>
            <param name="moments">Contains the second moments used to compute the eigensystem image.</param>
            <returns>The eigensystem image</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.Compute(VisionNET.SecondMomentImage,System.Single)">
            <summary>
            Computes the eigensystem image from the second moment image provided.
            </summary>
            <param name="moments">Contains the second moments used to compute the eigensystem image.</param>
            <param name="sigma">The sigma to use when convolving the second moment image</param>
            <returns>the eigensystem image</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.ToBitmap">
            <summary>
            When converted to a Bitmap, the image will show red at corners, blue at uniform regions, and green at edges.
            This is done using a default sensitivity of .001.
            </summary>
            <returns>A representative Bitmap</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.ToBitmap(System.Single)">
            <summary>
            When converted to a Bitmap, the image will show red at corners, blue at uniform regions, and green at edges.
            </summary>
            <param name="sensitivity">The sensitivity threshold to use when determining edges and corners.</param>
            <returns>A representative Bitmap</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.EigensystemImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.EigensystemImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.EigensystemImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.EigensystemImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.EigensystemImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.LabeledImage`1">
            <remarks>
            Class encapsulating an image, its ground truth labels, and an optional mask indicating which pixels are "valid" and should be considered.
            </remarks>
            <typeparam name="T">Underlying type of the source image</typeparam>
        </member>
        <member name="M:VisionNET.Learning.LabeledImage`1.#ctor(VisionNET.IMultichannelImage{`0},VisionNET.Learning.LabelImage)">
            <summary>
            Constructor.
            </summary>
            <param name="image">The source image</param>
            <param name="labels">The ground truth labels</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledImage`1.CreateAllDataPoints">
            <summary>
            Creates a list of all pixels in the image.
            </summary>
            <returns>List of all pixels in the image</returns>
        </member>
        <member name="M:VisionNET.Learning.LabeledImage`1.CreateAllDataPoints(VisionNET.Learning.BackgroundSampleMode)">
            <summary>
            Creates a list of pixels sampled according to <paramref name="mode"/>.
            </summary>
            <param name="mode">Mode to use when sampling pixels marked with the "background label" as defined by <see cref="F:VisionNET.Learning.LabelImage.BackgroundLabel"/></param>
            <returns>List of sampled pixels</returns>
        </member>
        <member name="P:VisionNET.Learning.LabeledImage`1.Valid">
            <summary>
            Mask over the image indicating which pixels are valid.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledImage`1.Image">
            <summary>
            Source image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledImage`1.Labels">
            <summary>
            Ground truth labels for the image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledImage`1.ID">
            <summary>
            ID of the image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledImage`1.SupervisionMode">
            <summary>
            The supervision mode to use when creating data points (whether to label them with all labels in the image, or their ground truth label.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.BackgroundSampleMode">
            <summary>
            Enumeration of modes for sampling pixels marked with the "background label" as defined by <see cref="F:VisionNET.Learning.LabelImage.BackgroundLabel"/>.
            </summary>
        </member>
        <member name="F:VisionNET.Learning.BackgroundSampleMode.Ignore">
            <summary>
            Ignore all background pixels.
            </summary>
        </member>
        <member name="F:VisionNET.Learning.BackgroundSampleMode.Half">
            <summary>
            Sample half of the background pixels.
            </summary>
        </member>
        <member name="F:VisionNET.Learning.BackgroundSampleMode.Full">
            <summary>
            Sample all background pixels.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.SupervisionMode">
            <summary>
            Enumeration of modes for supervision in the creation of training data.
            </summary>
        </member>
        <member name="F:VisionNET.Learning.SupervisionMode.Full">
            <summary>
            All pixels are marked with their ground truth labels.
            </summary>
        </member>
        <member name="F:VisionNET.Learning.SupervisionMode.Part">
            <summary>
            Pixels are marked with a set of labels corresponding to all the labels present in the ground truth image
            </summary>
        </member>
        <member name="F:VisionNET.Learning.SupervisionMode.None">
            <summary>
            Pixels have no training labels associated with them.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.LabeledDataSet`1">
            <remarks>
            This class encapsulates the training data for image-based recognition algorithms based on pixel-level object labels.
            </remarks>
            <typeparam name="T">Type of the underlying images in the training set</typeparam>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.#ctor(System.Collections.Generic.IEnumerable{VisionNET.Learning.LabeledImage{`0}},System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="images">Training images</param>
            <param name="dataPercentage">Percentage of data per split</param>
            <param name="imagePercentage">Percentage of images per split</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.#ctor(System.Collections.Generic.IEnumerable{VisionNET.Learning.LabeledImage{`0}},System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="images">Training images</param>
            <param name="dataPercentage">Percentage of data per split</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="dataPercentage">Percentage of data per split</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="dataPercentage">Percentage of data per split</param>
            <param name="imagePercentage">Percentage of images per split</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.AddImage(VisionNET.Learning.LabeledImage{`0})">
            <summary>
            Adds <paramref name="image"/> to the dataset.
            </summary>
            <param name="image">Image to add to the dataset</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.RemoveImage(VisionNET.Learning.LabeledImage{`0})">
            <summary>
            Removes <paramref name="image"/> from the dataset.
            </summary>
            <param name="image">Image to remove</param>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.Clear">
            <summary>
            Clears all images from the dataset.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.ComputeInverseLabelFrequency(System.Int32)">
            <summary>
            Computes the inverse label frequency array for the image.  This is an array in which each index holds a value equal
            to the total number of image labels divided by the total number of that particular label.
            </summary>
            <param name="numLabels">Total number of labels</param>
            <returns>Inverse label frequency</returns>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.CreateDataPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates several splits of the dataset.
            </summary>
            <param name="sampleFrequency">How often to sample pixels within the training images.</param>
            <param name="boxRows">Vertical trim around the edges of images to avoid feature tests beyond the boundary of the image</param>
            <param name="boxColumns">Vertical trim around the edges of images to avoid feature tests beyond the boundary of the image</param>
            <param name="numSplits">Number of splits to create</param>
            <returns>Splits of the data</returns>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.GetEnumerator">
            <summary>
            Returns an enumerator for the dataset.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:VisionNET.Learning.LabeledDataSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the dataset.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.SupervisionMode">
            <summary>
            Supervision mode of the dataset.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.DataPercentage">
            <summary>
            Percentage of data from each image to be included in each data split.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.ImagePercentage">
            <summary>
            Percentage of images to include in each data split.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.ByImage">
            <summary>
            Whether to sample by image first for a split before sampling pixels.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.BackgroundSampleMode">
            <summary>
            Sampling mode for background pixels.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.Count">
            <summary>
            Number of images in the dataset.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.LabeledDataSet`1.Item(System.Int32)">
            <summary>
            Indexes the dataset.
            </summary>
            <param name="index">Desired index</param>
            <returns>A labeled image</returns>
        </member>
        <member name="T:VisionNET.Learning.GibbsImage">
            <remarks>
            This class encapsulates a two dimensional probability distribution, and provides Gibbs sampling functions on that distribution.
            </remarks>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows in the image</param>
            <param name="columns">Number of columns in the image</param>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.Add(VisionNET.Learning.DistributionImage,System.Int16)">
            <summary>
            Adds a distribution image to this image, using <paramref name="label"/> to index that image.
            </summary>
            <param name="dist">The distribution image to add</param>
            <param name="label">The label to extract from the image</param>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.Add(VisionNET.Learning.LabelImage,System.Int16)">
            <summary>
            Adds a label image to the distribution.  Each time the label in <paramref name="labels"/> matches <paramref name="label"/>, the value at that pixel
            is incremented by 1.
            </summary>
            <param name="labels">Label image to add</param>
            <param name="label">The label to extract</param>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.Sample(System.Int32@,System.Int32@)">
            <summary>
            Samples a pixel from the distribution.
            </summary>
            <param name="row">The sampled row</param>
            <param name="column">The sampled column</param>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.ComputeDistribution">
            <summary>
            Computes the distribution of the image by normalizing.
            </summary>
            <returns>The image distribution</returns>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.ToBitmap">
            <summary>
            Converts this image to a bitmap.
            </summary>
            <returns>A bitmap version of the image</returns>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.Learning.GibbsImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.Learning.GibbsImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="T:VisionNET.DecisionForests.OutputModifier">
            <remarks>
            Enumeration of the various output modifiers that can be applied to a feature result.
            </remarks>
        </member>
        <member name="F:VisionNET.DecisionForests.OutputModifier.None">
            <summary>
            Output is left unmodified
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.OutputModifier.Log">
            <summary>
            The log of the output is taken
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.OutputModifier.AbsoluteValue">
            <summary>
            The absolute value of the output is used
            </summary>
        </member>
        <member name="F:VisionNET.DecisionForests.OutputModifier.All">
            <summary>
            Apply all transformations to the output.
            </summary>
        </member>
        <member name="T:VisionNET.DecisionForests.UnaryFeatureFactory">
            <remarks>
            Factory for unary features.  Will produce random unary image features for a decision tree based upon various parameters.
            </remarks>
        </member>
        <member name="M:VisionNET.DecisionForests.UnaryFeatureFactory.#ctor(System.Int32,System.Int32,System.Int32,VisionNET.DecisionForests.OutputModifier)">
            <summary>
            Constructor.
            </summary>
            <param name="boxRows">Number of rows in the box around a point in the image that can be used</param>
            <param name="boxColumns">Number of columns in the box around a point in the image that can be used</param>
            <param name="numChannels">Number of channels in the image to choose from</param>
            <param name="modifier">Modifier to apply to the output of the feature</param>
        </member>
        <member name="M:VisionNET.DecisionForests.UnaryFeatureFactory.Create">
            <summary>
            Creates a new feature.
            </summary>
            <returns>An object which implements <see cref="T:IFeature" /></returns>
        </member>
        <member name="M:VisionNET.DecisionForests.UnaryFeatureFactory.IsProduct(VisionNET.DecisionForests.IFeature{System.Single})">
            <summary>
            Returns whether <paramref name="feature"/> is a product of this factory.
            </summary>
            <param name="feature">Feature to test</param>
            <returns>True if it came from this factory, false otherwise.</returns>
        </member>
        <member name="T:VisionNET.PGM">
            <remarks>
            Utility class for reading and writing the PGM grayscale image file format.
            </remarks>
        </member>
        <member name="M:VisionNET.PGM.Read(System.String)">
            <summary>
            Reads a PGM file from <paramref name="filename"/>.
            </summary>
            <param name="filename">The location of the PGM file</param>
            <returns>An object encapsulating the image data</returns>
        </member>
        <member name="M:VisionNET.PGM.Write(VisionNET.GrayscaleImage,System.String)">
            <summary>
            Writes <paramref name="image"/> to <paramref name="filename"/> using the PGM file format.
            </summary>
            <param name="image">Image to write</param>
            <param name="filename">Path to write to</param>
        </member>
        <member name="T:VisionNET.IO">
            <remarks>
            Utility class for writing objects to and reading objects from the disk.  If there exists a static "Write" or "Read" method in the class definition, it will
            attempt to use it for serialization, otherwise it will use the default .NET serializer.
            </remarks>
        </member>
        <member name="M:VisionNET.IO.GetEncoder(System.String)">
            <summary>
            Returns the appropriate bitmap encoder for the file, if it exists.
            </summary>
            <param name="filename">The filename to check</param>
            <returns>An encoder, if it exists</returns>
        </member>
        <member name="M:VisionNET.IO.Write``1(System.String,``0)">
            <summary>
            Writes <paramref name="item"/> to the disk at location <paramref name="filename"/>.
            </summary>
            <typeparam name="T">Type of the object to write</typeparam>
            <param name="filename">Location on the disk to write to</param>
            <param name="item">The item to write</param>
        </member>
        <member name="M:VisionNET.IO.Write``1(System.IO.Stream,``0)">
            <summary>
            Writes <paramref name="item"/> to <paramref name="stream"/>.  If a method of the exact same signature exists in <typeparamref name="T"/> then it will attempt to use that one first,
            otherwise it will use the default .NET serializer.
            </summary>
            <typeparam name="T">Type of the object to write</typeparam>
            <param name="stream">Stream to write to</param>
            <param name="item">Item to write</param>
        </member>
        <member name="M:VisionNET.IO.Read``1(System.IO.Stream)">
            <summary>
            Reads an object of type <typeparamref name="T"/> from <paramref name="stream"/>.  If there exists a Read method of the same signature in <typeparamref name="T"/> then it will
            attempt to use that one first, otherwise it will use the default .NET Serializer.
            </summary>
            <typeparam name="T">Type of the object to read</typeparam>
            <param name="stream">The stream to read from</param>
            <returns>The object</returns>
        </member>
        <member name="M:VisionNET.IO.Read``1(System.String)">
            <summary>
            Reads an object of type <typeparamref name="T"/> from <paramref name="filename"/> on the disk.
            </summary>
            <typeparam name="T">The type of the object to read</typeparam>
            <param name="filename">The location on the disk to attempt to read</param>
            <returns>The object</returns>
        </member>
        <member name="T:VisionNET.ImageCell">
            <remarks>
            A "cell", or rectangular location in a grid imposed over an image.
            </remarks>
        </member>
        <member name="M:VisionNET.ImageCell.ToString">
            <summary>
            A string representation of the form "[Row, Column, Channel]".
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="P:VisionNET.ImageCell.Channel">
            <summary>
            The channel of the location.
            </summary>
        </member>
        <member name="P:VisionNET.ImageCell.Column">
            <summary>
            The column of the location.
            </summary>
        </member>
        <member name="P:VisionNET.ImageCell.Row">
            <summary>
            The row of the location.
            </summary>
        </member>
        <member name="T:VisionNET.Comparison.TreeNode">
            <remarks>
            A node in a tree histogram.
            </remarks>
        </member>
        <member name="F:VisionNET.Comparison.TreeNode.Tree">
            <summary>
            The tree associated with this node.
            </summary>
        </member>
        <member name="F:VisionNET.Comparison.TreeNode.Level">
            <summary>
            The level of the node within the tree.
            </summary>
        </member>
        <member name="F:VisionNET.Comparison.TreeNode.Bin">
            <summary>
            The bin within the level associated with this node.
            </summary>
        </member>
        <member name="F:VisionNET.Comparison.TreeNode.Value">
            <summary>
            The value stored at this node.
            </summary>
        </member>
        <member name="F:VisionNET.Comparison.TreeNode.LeafIndex">
            <summary>
            The leaf index of this node (if appropriate)
            </summary>
        </member>
        <member name="F:VisionNET.Comparison.TreeNode.Index">
            <summary>
            The index of this node within the tree.
            </summary>
        </member>
        <member name="M:VisionNET.Comparison.TreeNode.#ctor(System.Byte,System.Single,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="tree">The tree associated with this node</param>
            <param name="value">The value to store at this node</param>
            <param name="leafIndex">The leaf index of this node (if appropriate, otherwise -1)</param>
            <param name="index">The index of this node within the tree</param>
        </member>
        <member name="M:VisionNET.Comparison.TreeNode.#ctor(VisionNET.Comparison.TreeNode,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="example">Example to build this node from.</param>
            <param name="updatedValue">Updated value for the node.</param>
        </member>
        <member name="M:VisionNET.Comparison.TreeNode.ToString">
            <summary>
            Returns a string representation of the node in the form "Tree:Level:Bin:Value"
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:VisionNET.Comparison.TreeNode.CompareTo(VisionNET.Comparison.TreeNode)">
            <summary>
            Compares this node with another using <see cref="F:VisionNET.Comparison.TreeNode.Tree"/> and <see cref="F:VisionNET.Comparison.TreeNode.Index"/>.
            </summary>
            <param name="other">Node to compare</param>
            <returns>A positive number if greater, a negative number if lesser, and zero if equal.</returns>
        </member>
        <member name="T:VisionNET.GradientImage">
            <remarks>
            Represents the gradient of an image.  It has four channels: magnitude, orientation, horizontal gradient, and vertical gradient
            (in that order).
            </remarks>
        </member>
        <member name="F:VisionNET.GradientImage.SIGMA">
            <summary>
            The default sigma to use when smoothing the input image.
            </summary>
        </member>
        <member name="M:VisionNET.GradientImage.#ctor">
            <summary>
            Constructor.  Creates an empty image.
            </summary>
        </member>
        <member name="M:VisionNET.GradientImage.ToBitmap">
            <summary>
            Returns a Bitmap version of this image.
            </summary>
            <returns>A Bitmap representing this image</returns>
        </member>
        <member name="M:VisionNET.GradientImage.ToMagnitudeMap">
            <summary>
            Returns a GrayscaleImage representing the edge magnitude at each pixel.
            </summary>
            <returns>A magnitude map</returns>
        </member>
        <member name="M:VisionNET.GradientImage.Compute(VisionNET.GrayscaleImage)">
            <summary>
            Computes a gradient image from the source image using the default sigma value.
            </summary>
            <param name="image">Source image</param>
            <returns>Gradient image</returns>
        </member>
        <member name="M:VisionNET.GradientImage.Compute(VisionNET.GrayscaleImage,System.Boolean)">
            <summary>
            Computes a gradient image.
            </summary>
            <param name="image">Source image</param>
            <param name="blurImage">Whether to blur the source image before computing the gradient</param>
            <returns>Gradient image</returns>
        </member>
        <member name="M:VisionNET.GradientImage.Compute(VisionNET.GrayscaleImage,System.Single)">
            <summary>
            Computes a gradient image from the source image.
            </summary>
            <param name="sigma">The sigma to use when blurring the source image.</param>
            <param name="image">Source image</param>
            <returns>Gradient image</returns>        
        </member>
        <member name="M:VisionNET.GradientImage.Compute(System.String)">
            <summary>
            Computes a gradient image using the default sigma from the image found at the path specified.
            </summary>
            <param name="filename">Path to the source image</param>
            <returns>Gradient image</returns>
        </member>
        <member name="M:VisionNET.GradientImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.GradientImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.GradientImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.GradientImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.GradientImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.GradientImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.GradientImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Item(System.Int32,System.Int32,System.Char)">
            <summary>
            Returns the value requested by the character at (row,column).
            <list type="table">
            <listheader>
            <term>Character</term>
            <description>Channel</description>
            </listheader>
            <item><term>m,M</term>
            <description>Magnitude</description></item>
            <item><term>o,O</term>
            <description>Orientation</description></item>
            <item><term>x,X</term>
            <description>Horizontal gradient</description></item>
            <item><term>y,Y</term>
            <description>Vertical gradient</description></item>
            </list>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired channel</param>
            <returns>channel at (row,column)</returns>
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.GradientImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.GradientImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.UnsignedShortArrayHandler">
            <remarks>
            Handles a three dimensional array of unsigned short values.
            </remarks>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.#ctor">
            <summary>
            Constructor.  Creates a dimensionless array.
            </summary>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.#ctor(System.UInt16[0:,0:,0:],System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Array to handle.</param>
            <param name="isIntegral">Whether <paramref name="data"/> is an integral array.</param>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.SetData(System.UInt16[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.UnsignedShortArrayHandler.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.UnsignedShortArrayHandler.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.UnsignedShortArrayHandler.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.UnsignedShortArrayHandler.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.UnsignedShortArrayHandler.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.UnsignedShortArrayHandler.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="P:VisionNET.UnsignedShortArrayHandler.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="T:VisionNET.SecondMomentImage">
            <remarks>
            An image where each pixel has its second moments computed as three channels: <code>[gx*gx, gy*gy, gx*gy]</code>, where 
            <code>gx</code> is the gradient in the horizontal direction and <code>gy</code> is the gradient in the vertical direction.
            </remarks>
        </member>
        <member name="M:VisionNET.SecondMomentImage.#ctor">
            <summary>
            Constructor.  Creates an empty image.
            </summary>
        </member>
        <member name="M:VisionNET.SecondMomentImage.Compute(VisionNET.GradientImage)">
            <summary>
            Computes the second moments at each pixel based on the provided gradient image.
            </summary>
            <param name="grad">The gradient of the source image</param>
            <returns>The second moment image</returns>
        </member>
        <member name="M:VisionNET.SecondMomentImage.ToBitmap">
            <summary>
            Converts this image to a bitmap.  Not implemented.
            </summary>
            <returns>A bitmap version of the image</returns>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:VisionNET.SecondMomentImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.SecondMomentImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.SecondMomentImage.SetData(System.Single[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.SecondMomentImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.SecondMomentImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.SecondMomentImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.SecondMomentImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.SecondMomentImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.SecondMomentImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.GaussianSecondDerivative">
            <remarks>
            Class representing the second derivative of a Gaussian distribution in one dimension.
            </remarks>
        </member>
        <member name="M:VisionNET.GaussianSecondDerivative.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="mean">Desired mean</param>
            <param name="stddev">Desired standard deviation of the mean</param>
        </member>
        <member name="M:VisionNET.GaussianSecondDerivative.Compute(System.Single)">
            <summary>
            Computes the value of the function at the position indicated.
            </summary>
            <param name="x">The position to evaluate the function at</param>
            <returns>The value of the function at x</returns>
        </member>
        <member name="M:VisionNET.GaussianSecondDerivative.ComputeKernel(System.Single)">
            <summary>
            Computes a kernel based on the second derivative of a Gaussian at the correct size.  This kernel
            will sum to 0.
            </summary>
            <param name="stddev">Standard deviation of the Gaussian second derivative</param>
            <returns>A kernel for convolution</returns>
        </member>
        <member name="P:VisionNET.GaussianSecondDerivative.Mean">
            <summary>
            Mean of the Gaussian distribution.
            </summary>
        </member>
        <member name="P:VisionNET.GaussianSecondDerivative.StandardDeviation">
            <summary>
            Standard deviation of the Gaussian distribution.
            </summary>
        </member>
        <member name="T:VisionNET.GaussianFirstDerivative">
            <remarks>
            Class representing the first derivative of a Gaussian distribution in one dimension.
            </remarks>
        </member>
        <member name="M:VisionNET.GaussianFirstDerivative.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="mean">Desired mean</param>
            <param name="stddev">Desired standard deviation of the mean</param>
        </member>
        <member name="M:VisionNET.GaussianFirstDerivative.Compute(System.Single)">
            <summary>
            Computes the value of this function at the position indicated.
            </summary>
            <param name="x">The position to evalute at</param>
            <returns>The value of the function at x</returns>
        </member>
        <member name="M:VisionNET.GaussianFirstDerivative.ComputeKernel(System.Single)">
            <summary>
            Computes a kernel based on the second derivative of a Gaussian at the correct size.  This kernel
            will sum to 0.
            </summary>
            <param name="stddev">Standard deviation of the Gaussian second derivative</param>
            <returns>A kernel for convolution</returns>
        </member>
        <member name="P:VisionNET.GaussianFirstDerivative.Mean">
            <summary>
            Mean of the Gaussian distribution.
            </summary>
        </member>
        <member name="P:VisionNET.GaussianFirstDerivative.StandardDeviation">
            <summary>
            Standard deviation of the Gaussian distribution.
            </summary>
        </member>
        <member name="T:VisionNET.Gaussian">
            <remarks>
            Class representing a Gaussian (or Normal) distribution in one dimension.
            </remarks>
        </member>
        <member name="M:VisionNET.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="mean">Desired mean of the Gaussian</param>
            <param name="stdDev">Desired standard deviation of the mean.</param>
        </member>
        <member name="M:VisionNET.Gaussian.Sample">
            <summary>
            Randomly samples the Gaussian distribution.
            </summary>
            <returns>A sample from the Gaussian distribution</returns>
        </member>
        <member name="M:VisionNET.Gaussian.Estimate(System.Single[])">
            <summary>
            Estimates a Gaussian distribution from a collection of data points.
            </summary>
            <param name="data">The data points to model</param>
            <returns>An estimated distribution</returns>
        </member>
        <member name="M:VisionNET.Gaussian.Compute(System.Single)">
            <summary>
            Evaluates the Gaussian at x.
            </summary>
            <param name="x">The value to evaluate at</param>
            <returns>The Gaussian evaluated at x</returns>
        </member>
        <member name="M:VisionNET.Gaussian.ComputeHalfKernel(System.Single)">
            <summary>
            Computes a Gaussian kernel, takes the form {center value, value 1 pixel from center, value 2 pixels from center, etc.}.
            </summary>
            <param name="stddev">The standard deviation of the Gaussian</param>
            <returns>The kernel</returns>
        </member>
        <member name="M:VisionNET.Gaussian.ComputeKernel(System.Single)">
            <summary>
            Computes a kernel based on the second derivative of a Gaussian at the correct size.  This kernel
            will sum to 0.
            </summary>
            <param name="stddev">Standard deviation of the Gaussian second derivative</param>
            <returns>A kernel for convolution</returns>
        </member>
        <member name="P:VisionNET.Gaussian.Variance">
            <summary>
            The variance of the distribution.
            </summary>
        </member>
        <member name="P:VisionNET.Gaussian.Mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="P:VisionNET.Gaussian.StandardDeviation">
            <summary>
            The standard deviation of the distribution.
            </summary>
        </member>
        <member name="T:VisionNET.EdgeImage">
            <remarks>
            An image which has boolean values denoting whether an edge is present at
            each pixel.
            </remarks>
        </member>
        <member name="M:VisionNET.EdgeImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.  Creates an empty image.
            </summary>
            <param name="rows">The number of rows</param>
            <param name="columns">The number of columns</param>
        </member>
        <member name="M:VisionNET.EdgeImage.ToBitmap">
            <summary>
            Returns a Bitmap version of this image.
            </summary>
            <returns>A Bitmap representing this image</returns>
        </member>
        <member name="M:VisionNET.EdgeImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a sum of the values in the array within the rectangle starting at (<paramref name="startRow" />, <paramref name="startColumn"/>) in <paramref name="channel"/>
            with a size of <paramref name="rows"/>x<paramref name="columns"/>.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the rectangle</param>
            <param name="columns">Number of columns in the rectangle</param>
            <param name="channel">Channel to draw values from</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.EdgeImage.ComputeRectangleSum(System.Int32,System.Int32,System.Int32,VisionNET.Rectangle)">
            <summary>
            Computes a sum of the values in the array starting at (<paramref name="row"/>, <paramref name="column"/>) in <paramref name="channel" /> 
            in a rectangle described by the offset and size in <paramref name="rect"/>.
            </summary>
            <param name="row">Reference row</param>
            <param name="column">Reference column</param>
            <param name="channel">Channel to draw values from</param>
            <param name="rect">Offset and size of the rectangle</param>
            <returns>The sum of all values in the rectangle</returns>
        </member>
        <member name="M:VisionNET.EdgeImage.SetData(System.Boolean[0:,0:,0:])">
            <summary>
            Sets the data of the array to <paramref name="data"/>.  This new array will replace the current one.  No copy is created.
            </summary>
            <param name="data">Array to handle</param>
        </member>
        <member name="M:VisionNET.EdgeImage.SetDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the underlying array.  The resulting new array will replace the old array completely, no data will be copied over.
            </summary>
            <param name="rows">Number of desired rows in the new array.</param>
            <param name="columns">Number of desired columns in the new array.</param>
            <param name="channels">Number of desired channels in the new array.</param>
        </member>
        <member name="M:VisionNET.EdgeImage.ExtractRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a portion of the array defined by the parameters.
            </summary>
            <param name="startRow">Starting row</param>
            <param name="startColumn">Starting column</param>
            <param name="rows">Number of rows in the portion</param>
            <param name="columns">Number of columns in the portion</param>
            <returns>A portion of the array</returns>
        </member>
        <member name="M:VisionNET.EdgeImage.ExtractChannel(System.Int32)">
            <summary>
            Extracts an entire channel from the array.
            </summary>
            <param name="channel">Channel to extract</param>
            <returns>Extracted channel</returns>
        </member>
        <member name="M:VisionNET.EdgeImage.Clear">
            <summary>
            Clears all data from the array.
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.ID">
            <summary>
            Label for the image.
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.Item(System.Int32,System.Int32)">
            <summary>
            Returns or sets whether a pixel at a particular index is an edge.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <returns>Value at (row,column)</returns>
        </member>
        <member name="P:VisionNET.EdgeImage.Width">
            <summary>
            Width of the image (equivalent to <see cref="P:Columns" />)
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.Height">
            <summary>
            Height of the image (equivalment to <see cref="P:Rows" />)
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.IsIntegral">
            <summary>
            Sets whether this array is an integral array.  This property influences how the rectangle sum will be computed.
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.Rows">
            <summary>
            Number of rows in the array.
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.Columns">
            <summary>
            Number of columns in the array.
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.Channels">
            <summary>
            Number of channels in the array.
            </summary>
        </member>
        <member name="P:VisionNET.EdgeImage.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexes the underlying array.
            </summary>
            <param name="row">Desired row</param>
            <param name="column">Desired column</param>
            <param name="channel">Desired column</param>
            <returns>Value at (<paramref name="row"/>, <paramref name="column"/>, <paramref name="channel"/>) within the array.</returns>
        </member>
        <member name="P:VisionNET.EdgeImage.RawArray">
            <summary>
            The underlying array.  Breaks capsulation to allow operations using pointer arithmetic.
            </summary>
        </member>
        <member name="T:VisionNET.DiscreteContours">
            <remarks>
            Class for computing the Discrete Contour descriptor.
            </remarks>
        </member>
        <member name="F:VisionNET.DiscreteContours.DESCRIPTOR_LENGTH">
            <summary>
            Length of the descriptor.
            </summary>
        </member>
        <member name="F:VisionNET.DiscreteContours.RequiredPatchSize">
            <summary>
            Required patch size for this descriptor.
            </summary>
        </member>
        <member name="M:VisionNET.DiscreteContours.Compute(System.Collections.Generic.List{VisionNET.ScaleSpaceSample},VisionNET.ScaleSpacePyramid{VisionNET.GrayscaleImage})">
            <summary>
            Computes DiscreteContours at the samples provided.
            </summary>
            <param name="samples">Samples to compute contours at</param>
            <param name="pyramid">Image pyramid to use for samples</param>
            <returns>DiscreteContours</returns>
        </member>
        <member name="M:VisionNET.DiscreteContours.Compute(VisionNET.ScaleSpaceSample,VisionNET.GradientImage,System.Single)">
            <summary>
            Compute the Discrete Contour descriptor from the provided patch.  This match must be of gradients and
            of the size specified by <see cref="F:VisionNET.DiscreteContours.RequiredPatchSize"/>.  A raw image patch, or a patch of different
            dimensions, will not work.
            </summary>
            <param name="sample">Sample to compute DiscreteContour at</param>
            <param name="gradImage">Gradient image to use</param>
            <param name="scale">The scale of the sample (the value returned by ComputeSigma() in ScaleSpacePyramid)</param>
            <returns>Discrete Contour descriptor</returns>
        </member>
        <member name="T:VisionNET.VisionExtensions">
            <remarks>
            This class contains a series of useful extensions for various interfaces within the Vision.NET library.
            </remarks>
        </member>
        <member name="M:VisionNET.VisionExtensions.Normalize(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns a normalized version of <paramref name="distribution"/>.
            </summary>
            <param name="distribution">Values to normalize</param>
            <returns>A normalized version of <paramref name="distribution"/></returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.Sample(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Samples an index from <paramref name="distribution"/>.
            </summary>
            <param name="distribution">A collection of values which sum to 1</param>
            <returns>The sampled index</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.Sample``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Samples an index from <paramref name="list"/> using <paramref name="selector"/> to transform <typeparamref name="T"/> to a float.
            </summary>
            <typeparam name="T">Type of the list</typeparam>
            <param name="list">The list to sample</param>
            <param name="selector">Function used to create a normalized list</param>
            <returns>The sampled index</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a permutated version of <paramref name="list"/> of size <paramref name="size"/>.
            </summary>
            <typeparam name="T">The type of the list</typeparam>
            <param name="list">The list to permute</param>
            <param name="size">The size of the list to return</param>
            <returns>A permutated list</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.FindInside``1(System.Collections.Generic.IEnumerable{VisionNET.Learning.ImageDataPoint{``0}})">
            <summary>
            Finds a point which lies inside the segment defined by <paramref name="points"/>.
            </summary>
            <typeparam name="T">The underlying type of the data points</typeparam>
            <param name="points">The points defining the segment</param>
            <returns>A point on the inside of the segment</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a list of items with spaces in between and default formatting.
            </summary>
            <typeparam name="T">The type of the list's items</typeparam>
            <param name="list">The list to display</param>
            <returns>A string representation of the list with no delimiter</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.Product(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes and returns the set product (product of all numbers in <paramref name="list"/>).
            </summary>
            <param name="list">The list to multiply</param>
            <returns>The set product</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes and returns the set product (product of all numbers in <paramref name="list"/>), using <paramref name="selector"/> to translate
            the list members into float values.
            </summary>
            <param name="list">The list to multiply</param>
            <param name="selector">The function to use to translate the list members into float values</param>
            <returns>The set product</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Constructs a string representation of <paramref name="list"/> using <paramref name="formatString"/> to format all items in the list, separating them using <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">Type of the list's items</typeparam>
            <param name="list">The list to display</param>
            <param name="formatString">Used for formatting the items in the list</param>
            <param name="delimiter">Used to separate items in the list</param>
            <returns>A string representation</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.MaxIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the index of the maximum value of <paramref name="list"/>.
            </summary>
            <typeparam name="T">The underlying type of the list</typeparam>
            <param name="list">The list to examine</param>
            <returns>The index of the maximum value</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.ToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Converts a GDI+ <see cref="T:System.Drawing.Bitmap"/> object into a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> object.
            </summary>
            <param name="bitmap">The bitmap to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.ToBitmap(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> object into a GDI+ <see cref="T:System.Drawing.Bitmap"/> object.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:VisionNET.VisionExtensions.Save(System.Windows.Media.Imaging.BitmapEncoder,System.String)">
            <summary>
            Saves a bitmap to a file.
            </summary>
            <param name="encoder">The encoder to use when encoding the bitmap</param>
            <param name="filename">The filename to write to</param>
        </member>
        <member name="M:VisionNET.VisionExtensions.ExtractChannelAsImage(VisionNET.IArrayHandler{System.Single},System.Int32)">
            <summary>
            Extracts a channel as a Grayscale image.  Uses the <see cref="M:IArrayHandler.ExtractChannel"/> method.
            </summary>
            <param name="handler">The image upon which to operate</param>
            <param name="channel">The channel to extract</param>
            <returns>An image representation of the channel</returns>
        </member>
        <member name="T:VisionNET.Vector">
            <remarks>
            This class encapsulates a vector from geometry, that is an item with a series of values indicating position or magnitude in multiple dimensions.
            </remarks>
        </member>
        <member name="M:VisionNET.Vector.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="size">Number of dimensions</param>
        </member>
        <member name="M:VisionNET.Vector.#ctor(System.Single[])">
            <summary>
            Constructor.
            </summary>
            <param name="elements">The values of the vector</param>
        </member>
        <member name="M:VisionNET.Vector.Fill(System.Single)">
            <summary>
            Fills a vector with <paramref name="fillValue"/>.
            </summary>
            <param name="fillValue">The value to use for all dimensions in the vector</param>
        </member>
        <member name="M:VisionNET.Vector.Equals(System.Object)">
            <summary>
            Whether this vector is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">A Vector object</param>
            <returns>Whether this is equal to <paramref name="obj"/></returns>
        </member>
        <member name="M:VisionNET.Vector.GetHashCode">
            <summary>
            Computes unique hash code for the object.
            </summary>
            <returns>A unique hash code for the object</returns>
        </member>
        <member name="M:VisionNET.Vector.GetMagnitude">
            <summary>
            Computes the magnitude of the vector.
            </summary>
        </member>
        <member name="M:VisionNET.Vector.ToString">
            <summary>
            Returns a string representation of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionNET.Vector.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>A clone of the object</returns>
        </member>
        <member name="M:VisionNET.Vector.Add(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Adds two vectors together.  They must be of the same dimensionality.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The vector sum</returns>
        </member>
        <member name="M:VisionNET.Vector.Subtract(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Subracts one vector from another.  They must be of the same dimensionality.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The vector difference</returns>
        </member>
        <member name="M:VisionNET.Vector.Append(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Appends one vector to another.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The appended vector</returns>
        </member>
        <member name="M:VisionNET.Vector.DotProduct(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Computes the dot product of two vectors.  They must be of the same dimensionality.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:VisionNET.Vector.Multiply(System.Single,VisionNET.Vector)">
            <summary>
            Multiplies every value in <paramref name="rhs"/> by <paramref name="lhs"/>.
            </summary>
            <param name="lhs">The multiplier</param>
            <param name="rhs">The vector to multiply</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:VisionNET.Vector.Divide(VisionNET.Vector,System.Single)">
            <summary>
            Divides every value in <paramref name="lhs"/> by <paramref name="rhs"/>.
            </summary>
            <param name="lhs">The vector to divide</param>
            <param name="rhs">The divisor</param>
            <returns>The scaled vector</returns>
        </member>
        <member name="M:VisionNET.Vector.Multiply(VisionNET.Vector,System.Single)">
            <summary>
            Multiplies every value in <paramref name="lhs"/> by <paramref name="rhs"/>.
            </summary>
            <param name="rhs">The multiplier</param>
            <param name="lhs">The vector to multiply</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Addition(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Adds two vectors together.  They must be of the same dimensionality.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The vector sum</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Subtraction(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Subracts one vector from another.  They must be of the same dimensionality.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The vector difference</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Multiply(System.Single,VisionNET.Vector)">
            <summary>
            Multiplies every value in <paramref name="rhs"/> by <paramref name="lhs"/>.
            </summary>
            <param name="lhs">The multiplier</param>
            <param name="rhs">The vector to multiply</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Multiply(VisionNET.Vector,System.Single)">
            <summary>
            Multiplies every value in <paramref name="lhs"/> by <paramref name="rhs"/>.
            </summary>
            <param name="rhs">The multiplier</param>
            <param name="lhs">The vector to multiply</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Equality(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Returns whether the two vectors are equivalent.
            </summary>
            <param name="lhs">First vector to compare</param>
            <param name="rhs">Second vector to compare</param>
            <returns>True if equivalent, false otherwise</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Inequality(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Returns whether the two vectors are not equivalent.
            </summary>
            <param name="lhs">First vector to compare</param>
            <param name="rhs">Second vector to compare</param>
            <returns>True if not equivalent, false otherwise</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Multiply(VisionNET.Vector,VisionNET.Vector)">
            <summary>
            Computes the dot product of two vectors.  They must be of the same dimensionality.
            </summary>
            <param name="lhs">The first vector</param>
            <param name="rhs">The second vector</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:VisionNET.Vector.op_Division(VisionNET.Vector,System.Single)">
            <summary>
            Divides every value in <paramref name="lhs"/> by <paramref name="rhs"/>.
            </summary>
            <param name="lhs">The vector to divide</param>
            <param name="rhs">The divisor</param>
            <returns>The scaled vector</returns>
        </member>
        <member name="M:VisionNET.Vector.GetEnumerator">
            <summary>
            Returns an enumerator for the vector.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:VisionNET.Vector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the vector.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="P:VisionNET.Vector.X">
            <summary>
            The first dimension of the vector
            </summary>
        </member>
        <member name="P:VisionNET.Vector.Y">
            <summary>
            The second dimension of the vector
            </summary>
        </member>
        <member name="P:VisionNET.Vector.Z">
            <summary>
            The third dimension of the vector
            </summary>
        </member>
        <member name="P:VisionNET.Vector.Item(System.Int32)">
            <summary>
            The dimension of this vector at <paramref name="index"/>.
            </summary>
            <param name="index">The dimension to retrieve</param>
            <returns>The value at dimension <paramref name="index"/></returns>
        </member>
        <member name="P:VisionNET.Vector.Size">
            <summary>
            The number of dimension in the vector.
            </summary>
        </member>
        <member name="T:VisionNET.ProgressUpdate">
            <remarks>
            Handler for progress update messages.
            </remarks>
            <param name="value">The current progress</param>
            <param name="maximum">The maximum amount (when progress is complete)</param>
        </member>
        <member name="T:VisionNET.MessageUpdate">
            <remarks>
            Handler for generic update messages.
            </remarks>
            <param name="message">An update message</param>
        </member>
        <member name="T:VisionNET.ClearHandler">
            <remarks>
            Handler for console clearing requests.
            </remarks>
        </member>
        <member name="T:VisionNET.UpdateManager">
            <remarks>
            The Update Manager class provides a mechanism for having console-like feedback that can be handled either
            by using the console or by having console-like controls in a GUI.  Essentially, it allows for the same code to be used on the command line
            or with a GUI without significant changes to its feedback mechanisms.
            </remarks>
        </member>
        <member name="M:VisionNET.UpdateManager.GetID">
            <summary>
            Returns a new, unique process ID.
            </summary>
            <returns>A unique process ID</returns>
        </member>
        <member name="M:VisionNET.UpdateManager.Clear">
            <summary>
            Request a message clear for process <paramref name="processID"/>.
            </summary>
        </member>
        <member name="M:VisionNET.UpdateManager.RaiseProgress(System.Int32,System.Int32)">
            <summary>
            Request a progress update message be sent for process <paramref name="processID"/>.
            </summary>
            <param name="value">Current progress value</param>
            <param name="maximum">Maximum possible progress value</param>
        </member>
        <member name="M:VisionNET.UpdateManager.WriteLine(System.Object)">
            <summary>
            Emulates <see cref="M:System.Console.WriteLine(System.String)"/>, but generates a message update request instead.
            </summary>
            <param name="o">Object to write</param>
        </member>
        <member name="M:VisionNET.UpdateManager.WriteLine(System.String,System.Object[])">
            <summary>
            Emulates <see cref="M:System.Console.WriteLine(System.String,System.Object)"/>, but generates a message update request instead.
            </summary>
            <param name="message">A format string</param>
            <param name="args">Arguments to the format string</param>
        </member>
        <member name="M:VisionNET.UpdateManager.Write(System.Object)">
            <summary>
            Emulates <see cref="M:System.Console.Write(System.String)"/>, but generates a message update request instead.
            </summary>
            <param name="o">Object to write</param>
        </member>
        <member name="M:VisionNET.UpdateManager.Write(System.String,System.Object[])">
            <summary>
            Emulates <see cref="M:System.Console.Write(System.String,System.Object)"/>, but generates a message update request instead.
            </summary>
            <param name="message">A format string</param>
            <param name="args">Arguments to the format string</param>
        </member>
        <member name="M:VisionNET.UpdateManager.ProgressEnum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an enumerable object which generates a progress update each time a new 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:VisionNET.UpdateManager.ConsoleOutput">
            <summary>
            Whether the UpdateManager should automatically output all messages to the console.
            </summary>
        </member>
        <member name="E:VisionNET.UpdateManager.Progress">
            <summary>
            This event fires whenever a process indicates that progress has increased.
            </summary>
        </member>
        <member name="E:VisionNET.UpdateManager.Message">
            <summary>
            This event fires whenever a process indicates that it wants to send a message.
            </summary>
        </member>
        <member name="E:VisionNET.UpdateManager.ClearRequest">
            <summary>
            This event fires whenever a process requests that all previous messages be cleared.
            </summary>
        </member>
        <member name="P:VisionNET.UpdateManager.AppendMemory">
            <summary>
            Whether the UpdateManager should append the currently available memory to all update messages.
            </summary>
        </member>
        <member name="P:VisionNET.UpdateManager.MemoryAvailable">
            <summary>
            The current amount of memory available to the calling process.
            </summary>
        </member>
        <member name="T:VisionNET.Learning.LabelSet">
            <remarks>
            A class encapsulating a set of labels.  This is a set in the sense that all values with it are unique, i.e. no repeated labels.
            </remarks>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.#ctor(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Constructor.
            </summary>
            <param name="labels">List of labels which may or may not have repeat values</param>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.#ctor(System.Int16[])">
            <summary>
            Constructor.
            </summary>
            <param name="labels">Labels to use when creating the set</param>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.Equals(System.Object)">
            <summary>
            Whether this set is equal to another set.
            </summary>
            <param name="obj">Set to compare to</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.GetHashCode">
            <summary>
            Returns a unique hash code for the label set.
            </summary>
            <returns>A hash code for this object</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.ToString">
            <summary>
            Returns a string representation of the set of the form "[value1, value2, ...]".
            </summary>
            <returns>A string representation</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.Add(System.Int16)">
            <summary>
            Adds <paramref name="label"/> to the set.
            </summary>
            <param name="label">Label to add</param>
            <returns>True if successful, false if label is already in the set</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.Remove(System.Int16)">
            <summary>
            Removes a label from the set.
            </summary>
            <param name="label">Label to remove</param>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.Contains(System.Int16)">
            <summary>
            Whether the set contains <paramref name="label"/>.
            </summary>
            <param name="label">The label to look for</param>
            <returns>Whether the set contains <paramref name="label"/></returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.GetEnumerator">
            <summary>
            Returns an enumerator for the set values.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the set values.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.CompareTo(VisionNET.Learning.LabelSet)">
            <summary>
            Compares this set to <paramref name="other"/>.
            </summary>
            <param name="other">Set to compare to.</param>
            <returns>Whether this set is "less" or "more" than <paramref name="other"/></returns>
        </member>
        <member name="M:VisionNET.Learning.LabelSet.ToString(VisionNET.Learning.LabelDictionary)">
            <summary>
            Returns a string representation of this label set using <paramref name="labelDictionary"/> to lookup the label values for representative strings.
            </summary>
            <param name="labelDictionary">Lookup dictionary</param>
            <returns>A string representation</returns>
        </member>
        <member name="P:VisionNET.Learning.LabelSet.Item(System.Int32)">
            <summary>
            Indexes the set.
            </summary>
            <param name="index">Set index</param>
            <returns>The label at <paramref name="index"/></returns>
        </member>
        <member name="P:VisionNET.Learning.LabelSet.Count">
            <summary>
            Number of labels in the set.
            </summary>
        </member>
    </members>
</doc>
